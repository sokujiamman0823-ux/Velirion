/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace VelirionPresaleV2 {
  export type PhaseStruct = {
    startTime: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    pricePerToken: PromiseOrValue<BigNumberish>;
    maxTokens: PromiseOrValue<BigNumberish>;
    soldTokens: PromiseOrValue<BigNumberish>;
    isActive: PromiseOrValue<boolean>;
  };

  export type PhaseStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    startTime: BigNumber;
    endTime: BigNumber;
    pricePerToken: BigNumber;
    maxTokens: BigNumber;
    soldTokens: BigNumber;
    isActive: boolean;
  };

  export type ReferralStruct = {
    referrer: PromiseOrValue<string>;
    totalReferred: PromiseOrValue<BigNumberish>;
    totalEarned: PromiseOrValue<BigNumberish>;
    totalVolume: PromiseOrValue<BigNumberish>;
  };

  export type ReferralStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    referrer: string;
    totalReferred: BigNumber;
    totalEarned: BigNumber;
    totalVolume: BigNumber;
  };

  export type PurchaseStruct = {
    phaseId: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    tokenAmount: PromiseOrValue<BigNumberish>;
    paymentToken: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type PurchaseStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    phaseId: BigNumber;
    amount: BigNumber;
    tokenAmount: BigNumber;
    paymentToken: string;
    timestamp: BigNumber;
  };

  export type VestingScheduleStruct = {
    totalAmount: PromiseOrValue<BigNumberish>;
    claimedAmount: PromiseOrValue<BigNumberish>;
    tgeAmount: PromiseOrValue<BigNumberish>;
    month1Amount: PromiseOrValue<BigNumberish>;
    month2Amount: PromiseOrValue<BigNumberish>;
  };

  export type VestingScheduleStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    totalAmount: BigNumber;
    claimedAmount: BigNumber;
    tgeAmount: BigNumber;
    month1Amount: BigNumber;
    month2Amount: BigNumber;
  };
}

export interface VelirionPresaleV2Interface extends utils.Interface {
  functions: {
    "BASIS_POINTS()": FunctionFragment;
    "MAX_PER_TRANSACTION()": FunctionFragment;
    "MAX_PER_WALLET()": FunctionFragment;
    "MONTH_1_PERCENT()": FunctionFragment;
    "MONTH_2_PERCENT()": FunctionFragment;
    "PURCHASE_DELAY()": FunctionFragment;
    "REFERRAL_BONUS_BPS()": FunctionFragment;
    "TGE_PERCENT()": FunctionFragment;
    "VESTING_INTERVAL()": FunctionFragment;
    "buyWithETH(address)": FunctionFragment;
    "buyWithUSDC(uint256,address)": FunctionFragment;
    "buyWithUSDT(uint256,address)": FunctionFragment;
    "calculateTokenAmount(uint256)": FunctionFragment;
    "calculateTokenAmountForETH(uint256)": FunctionFragment;
    "canPurchase(address)": FunctionFragment;
    "claimTokens()": FunctionFragment;
    "currentPhase()": FunctionFragment;
    "endCurrentPhase()": FunctionFragment;
    "ethUsdPrice()": FunctionFragment;
    "finalizePresale()": FunctionFragment;
    "getClaimableAmount(address)": FunctionFragment;
    "getCurrentPhaseInfo()": FunctionFragment;
    "getPhaseInfo(uint256)": FunctionFragment;
    "getReferralInfo(address)": FunctionFragment;
    "getTotalTokensSold()": FunctionFragment;
    "getUserPurchases(address)": FunctionFragment;
    "getVestingSchedule(address)": FunctionFragment;
    "hasBeenReferred(address)": FunctionFragment;
    "initializePhases()": FunctionFragment;
    "isPhaseActive()": FunctionFragment;
    "lastPurchaseTime(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "phases(uint256)": FunctionFragment;
    "presaleFinalized()": FunctionFragment;
    "presaleStartTime()": FunctionFragment;
    "referrals(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setEthUsdPrice(uint256)": FunctionFragment;
    "startPhase(uint256,uint256)": FunctionFragment;
    "startPresale(uint256)": FunctionFragment;
    "totalPurchasedVLR(address)": FunctionFragment;
    "totalRaisedUSD()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "usdcToken()": FunctionFragment;
    "usdtToken()": FunctionFragment;
    "userPurchases(address,uint256)": FunctionFragment;
    "vestingSchedules(address)": FunctionFragment;
    "vlrToken()": FunctionFragment;
    "withdrawETH()": FunctionFragment;
    "withdrawUSDC()": FunctionFragment;
    "withdrawUSDT()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASIS_POINTS"
      | "MAX_PER_TRANSACTION"
      | "MAX_PER_WALLET"
      | "MONTH_1_PERCENT"
      | "MONTH_2_PERCENT"
      | "PURCHASE_DELAY"
      | "REFERRAL_BONUS_BPS"
      | "TGE_PERCENT"
      | "VESTING_INTERVAL"
      | "buyWithETH"
      | "buyWithUSDC"
      | "buyWithUSDT"
      | "calculateTokenAmount"
      | "calculateTokenAmountForETH"
      | "canPurchase"
      | "claimTokens"
      | "currentPhase"
      | "endCurrentPhase"
      | "ethUsdPrice"
      | "finalizePresale"
      | "getClaimableAmount"
      | "getCurrentPhaseInfo"
      | "getPhaseInfo"
      | "getReferralInfo"
      | "getTotalTokensSold"
      | "getUserPurchases"
      | "getVestingSchedule"
      | "hasBeenReferred"
      | "initializePhases"
      | "isPhaseActive"
      | "lastPurchaseTime"
      | "owner"
      | "pause"
      | "paused"
      | "phases"
      | "presaleFinalized"
      | "presaleStartTime"
      | "referrals"
      | "renounceOwnership"
      | "setEthUsdPrice"
      | "startPhase"
      | "startPresale"
      | "totalPurchasedVLR"
      | "totalRaisedUSD"
      | "transferOwnership"
      | "unpause"
      | "usdcToken"
      | "usdtToken"
      | "userPurchases"
      | "vestingSchedules"
      | "vlrToken"
      | "withdrawETH"
      | "withdrawUSDC"
      | "withdrawUSDT"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PER_TRANSACTION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PER_WALLET",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MONTH_1_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MONTH_2_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PURCHASE_DELAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REFERRAL_BONUS_BPS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TGE_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VESTING_INTERVAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyWithETH",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyWithUSDC",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyWithUSDT",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTokenAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTokenAmountForETH",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "canPurchase",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endCurrentPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethUsdPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "finalizePresale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPhaseInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPhaseInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTokensSold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPurchases",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedule",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasBeenReferred",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initializePhases",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPhaseActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastPurchaseTime",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "phases",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "presaleFinalized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presaleStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referrals",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEthUsdPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "startPhase",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "startPresale",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPurchasedVLR",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRaisedUSD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdtToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userPurchases",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingSchedules",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "vlrToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUSDC",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUSDT",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PER_TRANSACTION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PER_WALLET",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MONTH_1_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MONTH_2_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PURCHASE_DELAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REFERRAL_BONUS_BPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TGE_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VESTING_INTERVAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyWithETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyWithUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyWithUSDT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTokenAmountForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endCurrentPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ethUsdPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizePresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPhaseInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPhaseInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTokensSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPurchases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasBeenReferred",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializePhases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPhaseActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPurchaseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "phases", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "presaleFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presaleStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "referrals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEthUsdPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startPhase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startPresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPurchasedVLR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRaisedUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdtToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userPurchases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingSchedules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vlrToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUSDT",
    data: BytesLike
  ): Result;

  events: {
    "EthPriceUpdated(uint256)": EventFragment;
    "FundsWithdrawn(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PhaseEnded(uint256,uint256)": EventFragment;
    "PhaseInitialized(uint256,uint256,uint256)": EventFragment;
    "PhaseStarted(uint256,uint256)": EventFragment;
    "PresaleFinalized(uint256)": EventFragment;
    "ReferralBonus(address,address,uint256)": EventFragment;
    "TokensClaimed(address,uint256)": EventFragment;
    "TokensPurchased(address,uint256,uint256,uint256,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EthPriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PhaseEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PhaseInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PhaseStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PresaleFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralBonus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface EthPriceUpdatedEventObject {
  newPrice: BigNumber;
}
export type EthPriceUpdatedEvent = TypedEvent<
  [BigNumber],
  EthPriceUpdatedEventObject
>;

export type EthPriceUpdatedEventFilter = TypedEventFilter<EthPriceUpdatedEvent>;

export interface FundsWithdrawnEventObject {
  token: string;
  amount: BigNumber;
}
export type FundsWithdrawnEvent = TypedEvent<
  [string, BigNumber],
  FundsWithdrawnEventObject
>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PhaseEndedEventObject {
  phaseId: BigNumber;
  endTime: BigNumber;
}
export type PhaseEndedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PhaseEndedEventObject
>;

export type PhaseEndedEventFilter = TypedEventFilter<PhaseEndedEvent>;

export interface PhaseInitializedEventObject {
  phaseId: BigNumber;
  pricePerToken: BigNumber;
  maxTokens: BigNumber;
}
export type PhaseInitializedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  PhaseInitializedEventObject
>;

export type PhaseInitializedEventFilter =
  TypedEventFilter<PhaseInitializedEvent>;

export interface PhaseStartedEventObject {
  phaseId: BigNumber;
  startTime: BigNumber;
}
export type PhaseStartedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PhaseStartedEventObject
>;

export type PhaseStartedEventFilter = TypedEventFilter<PhaseStartedEvent>;

export interface PresaleFinalizedEventObject {
  unsoldTokens: BigNumber;
}
export type PresaleFinalizedEvent = TypedEvent<
  [BigNumber],
  PresaleFinalizedEventObject
>;

export type PresaleFinalizedEventFilter =
  TypedEventFilter<PresaleFinalizedEvent>;

export interface ReferralBonusEventObject {
  referrer: string;
  referee: string;
  bonusAmount: BigNumber;
}
export type ReferralBonusEvent = TypedEvent<
  [string, string, BigNumber],
  ReferralBonusEventObject
>;

export type ReferralBonusEventFilter = TypedEventFilter<ReferralBonusEvent>;

export interface TokensClaimedEventObject {
  user: string;
  amount: BigNumber;
}
export type TokensClaimedEvent = TypedEvent<
  [string, BigNumber],
  TokensClaimedEventObject
>;

export type TokensClaimedEventFilter = TypedEventFilter<TokensClaimedEvent>;

export interface TokensPurchasedEventObject {
  buyer: string;
  phaseId: BigNumber;
  amountPaid: BigNumber;
  tokenAmount: BigNumber;
  paymentToken: string;
  referrer: string;
}
export type TokensPurchasedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string, string],
  TokensPurchasedEventObject
>;

export type TokensPurchasedEventFilter = TypedEventFilter<TokensPurchasedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface VelirionPresaleV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VelirionPresaleV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PER_TRANSACTION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PER_WALLET(overrides?: CallOverrides): Promise<[BigNumber]>;

    MONTH_1_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MONTH_2_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    PURCHASE_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    REFERRAL_BONUS_BPS(overrides?: CallOverrides): Promise<[BigNumber]>;

    TGE_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    VESTING_INTERVAL(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyWithETH(
      referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyWithUSDC(
      amount: PromiseOrValue<BigNumberish>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyWithUSDT(
      amount: PromiseOrValue<BigNumberish>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateTokenAmount(
      usdValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateTokenAmountForETH(
      ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canPurchase(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    claimTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentPhase(overrides?: CallOverrides): Promise<[BigNumber]>;

    endCurrentPhase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    ethUsdPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    finalizePresale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getClaimableAmount(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentPhaseInfo(
      overrides?: CallOverrides
    ): Promise<[VelirionPresaleV2.PhaseStructOutput]>;

    getPhaseInfo(
      phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[VelirionPresaleV2.PhaseStructOutput]>;

    getReferralInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[VelirionPresaleV2.ReferralStructOutput]>;

    getTotalTokensSold(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserPurchases(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[VelirionPresaleV2.PurchaseStructOutput[]]>;

    getVestingSchedule(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[VelirionPresaleV2.VestingScheduleStructOutput]>;

    hasBeenReferred(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initializePhases(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isPhaseActive(overrides?: CallOverrides): Promise<[boolean]>;

    lastPurchaseTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    phases(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        startTime: BigNumber;
        endTime: BigNumber;
        pricePerToken: BigNumber;
        maxTokens: BigNumber;
        soldTokens: BigNumber;
        isActive: boolean;
      }
    >;

    presaleFinalized(overrides?: CallOverrides): Promise<[boolean]>;

    presaleStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    referrals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        referrer: string;
        totalReferred: BigNumber;
        totalEarned: BigNumber;
        totalVolume: BigNumber;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEthUsdPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startPhase(
      phaseId: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startPresale(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalPurchasedVLR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalRaisedUSD(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usdcToken(overrides?: CallOverrides): Promise<[string]>;

    usdtToken(overrides?: CallOverrides): Promise<[string]>;

    userPurchases(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, BigNumber] & {
        phaseId: BigNumber;
        amount: BigNumber;
        tokenAmount: BigNumber;
        paymentToken: string;
        timestamp: BigNumber;
      }
    >;

    vestingSchedules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        claimedAmount: BigNumber;
        tgeAmount: BigNumber;
        month1Amount: BigNumber;
        month2Amount: BigNumber;
      }
    >;

    vlrToken(overrides?: CallOverrides): Promise<[string]>;

    withdrawETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawUSDC(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawUSDT(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PER_TRANSACTION(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PER_WALLET(overrides?: CallOverrides): Promise<BigNumber>;

  MONTH_1_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  MONTH_2_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  PURCHASE_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

  REFERRAL_BONUS_BPS(overrides?: CallOverrides): Promise<BigNumber>;

  TGE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  VESTING_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

  buyWithETH(
    referrer: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyWithUSDC(
    amount: PromiseOrValue<BigNumberish>,
    referrer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyWithUSDT(
    amount: PromiseOrValue<BigNumberish>,
    referrer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateTokenAmount(
    usdValue: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateTokenAmountForETH(
    ethAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canPurchase(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[boolean, string]>;

  claimTokens(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

  endCurrentPhase(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  ethUsdPrice(overrides?: CallOverrides): Promise<BigNumber>;

  finalizePresale(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getClaimableAmount(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentPhaseInfo(
    overrides?: CallOverrides
  ): Promise<VelirionPresaleV2.PhaseStructOutput>;

  getPhaseInfo(
    phaseId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<VelirionPresaleV2.PhaseStructOutput>;

  getReferralInfo(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<VelirionPresaleV2.ReferralStructOutput>;

  getTotalTokensSold(overrides?: CallOverrides): Promise<BigNumber>;

  getUserPurchases(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<VelirionPresaleV2.PurchaseStructOutput[]>;

  getVestingSchedule(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<VelirionPresaleV2.VestingScheduleStructOutput>;

  hasBeenReferred(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initializePhases(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isPhaseActive(overrides?: CallOverrides): Promise<boolean>;

  lastPurchaseTime(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  phases(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      startTime: BigNumber;
      endTime: BigNumber;
      pricePerToken: BigNumber;
      maxTokens: BigNumber;
      soldTokens: BigNumber;
      isActive: boolean;
    }
  >;

  presaleFinalized(overrides?: CallOverrides): Promise<boolean>;

  presaleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  referrals(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      referrer: string;
      totalReferred: BigNumber;
      totalEarned: BigNumber;
      totalVolume: BigNumber;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEthUsdPrice(
    _price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startPhase(
    phaseId: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startPresale(
    duration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalPurchasedVLR(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalRaisedUSD(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usdcToken(overrides?: CallOverrides): Promise<string>;

  usdtToken(overrides?: CallOverrides): Promise<string>;

  userPurchases(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, BigNumber] & {
      phaseId: BigNumber;
      amount: BigNumber;
      tokenAmount: BigNumber;
      paymentToken: string;
      timestamp: BigNumber;
    }
  >;

  vestingSchedules(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalAmount: BigNumber;
      claimedAmount: BigNumber;
      tgeAmount: BigNumber;
      month1Amount: BigNumber;
      month2Amount: BigNumber;
    }
  >;

  vlrToken(overrides?: CallOverrides): Promise<string>;

  withdrawETH(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawUSDC(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawUSDT(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PER_TRANSACTION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PER_WALLET(overrides?: CallOverrides): Promise<BigNumber>;

    MONTH_1_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    MONTH_2_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    PURCHASE_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    REFERRAL_BONUS_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    TGE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    VESTING_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    buyWithETH(
      referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyWithUSDC(
      amount: PromiseOrValue<BigNumberish>,
      referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyWithUSDT(
      amount: PromiseOrValue<BigNumberish>,
      referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateTokenAmount(
      usdValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTokenAmountForETH(
      ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canPurchase(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, string]>;

    claimTokens(overrides?: CallOverrides): Promise<void>;

    currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    endCurrentPhase(overrides?: CallOverrides): Promise<void>;

    ethUsdPrice(overrides?: CallOverrides): Promise<BigNumber>;

    finalizePresale(overrides?: CallOverrides): Promise<void>;

    getClaimableAmount(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPhaseInfo(
      overrides?: CallOverrides
    ): Promise<VelirionPresaleV2.PhaseStructOutput>;

    getPhaseInfo(
      phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<VelirionPresaleV2.PhaseStructOutput>;

    getReferralInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<VelirionPresaleV2.ReferralStructOutput>;

    getTotalTokensSold(overrides?: CallOverrides): Promise<BigNumber>;

    getUserPurchases(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<VelirionPresaleV2.PurchaseStructOutput[]>;

    getVestingSchedule(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<VelirionPresaleV2.VestingScheduleStructOutput>;

    hasBeenReferred(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initializePhases(overrides?: CallOverrides): Promise<void>;

    isPhaseActive(overrides?: CallOverrides): Promise<boolean>;

    lastPurchaseTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    phases(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        startTime: BigNumber;
        endTime: BigNumber;
        pricePerToken: BigNumber;
        maxTokens: BigNumber;
        soldTokens: BigNumber;
        isActive: boolean;
      }
    >;

    presaleFinalized(overrides?: CallOverrides): Promise<boolean>;

    presaleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    referrals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        referrer: string;
        totalReferred: BigNumber;
        totalEarned: BigNumber;
        totalVolume: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setEthUsdPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startPhase(
      phaseId: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    startPresale(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalPurchasedVLR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalRaisedUSD(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    usdcToken(overrides?: CallOverrides): Promise<string>;

    usdtToken(overrides?: CallOverrides): Promise<string>;

    userPurchases(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, BigNumber] & {
        phaseId: BigNumber;
        amount: BigNumber;
        tokenAmount: BigNumber;
        paymentToken: string;
        timestamp: BigNumber;
      }
    >;

    vestingSchedules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        claimedAmount: BigNumber;
        tgeAmount: BigNumber;
        month1Amount: BigNumber;
        month2Amount: BigNumber;
      }
    >;

    vlrToken(overrides?: CallOverrides): Promise<string>;

    withdrawETH(overrides?: CallOverrides): Promise<void>;

    withdrawUSDC(overrides?: CallOverrides): Promise<void>;

    withdrawUSDT(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "EthPriceUpdated(uint256)"(newPrice?: null): EthPriceUpdatedEventFilter;
    EthPriceUpdated(newPrice?: null): EthPriceUpdatedEventFilter;

    "FundsWithdrawn(address,uint256)"(
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): FundsWithdrawnEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PhaseEnded(uint256,uint256)"(
      phaseId?: PromiseOrValue<BigNumberish> | null,
      endTime?: null
    ): PhaseEndedEventFilter;
    PhaseEnded(
      phaseId?: PromiseOrValue<BigNumberish> | null,
      endTime?: null
    ): PhaseEndedEventFilter;

    "PhaseInitialized(uint256,uint256,uint256)"(
      phaseId?: PromiseOrValue<BigNumberish> | null,
      pricePerToken?: null,
      maxTokens?: null
    ): PhaseInitializedEventFilter;
    PhaseInitialized(
      phaseId?: PromiseOrValue<BigNumberish> | null,
      pricePerToken?: null,
      maxTokens?: null
    ): PhaseInitializedEventFilter;

    "PhaseStarted(uint256,uint256)"(
      phaseId?: PromiseOrValue<BigNumberish> | null,
      startTime?: null
    ): PhaseStartedEventFilter;
    PhaseStarted(
      phaseId?: PromiseOrValue<BigNumberish> | null,
      startTime?: null
    ): PhaseStartedEventFilter;

    "PresaleFinalized(uint256)"(
      unsoldTokens?: null
    ): PresaleFinalizedEventFilter;
    PresaleFinalized(unsoldTokens?: null): PresaleFinalizedEventFilter;

    "ReferralBonus(address,address,uint256)"(
      referrer?: PromiseOrValue<string> | null,
      referee?: PromiseOrValue<string> | null,
      bonusAmount?: null
    ): ReferralBonusEventFilter;
    ReferralBonus(
      referrer?: PromiseOrValue<string> | null,
      referee?: PromiseOrValue<string> | null,
      bonusAmount?: null
    ): ReferralBonusEventFilter;

    "TokensClaimed(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): TokensClaimedEventFilter;
    TokensClaimed(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): TokensClaimedEventFilter;

    "TokensPurchased(address,uint256,uint256,uint256,address,address)"(
      buyer?: PromiseOrValue<string> | null,
      phaseId?: PromiseOrValue<BigNumberish> | null,
      amountPaid?: null,
      tokenAmount?: null,
      paymentToken?: null,
      referrer?: null
    ): TokensPurchasedEventFilter;
    TokensPurchased(
      buyer?: PromiseOrValue<string> | null,
      phaseId?: PromiseOrValue<BigNumberish> | null,
      amountPaid?: null,
      tokenAmount?: null,
      paymentToken?: null,
      referrer?: null
    ): TokensPurchasedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PER_TRANSACTION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PER_WALLET(overrides?: CallOverrides): Promise<BigNumber>;

    MONTH_1_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    MONTH_2_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    PURCHASE_DELAY(overrides?: CallOverrides): Promise<BigNumber>;

    REFERRAL_BONUS_BPS(overrides?: CallOverrides): Promise<BigNumber>;

    TGE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    VESTING_INTERVAL(overrides?: CallOverrides): Promise<BigNumber>;

    buyWithETH(
      referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyWithUSDC(
      amount: PromiseOrValue<BigNumberish>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyWithUSDT(
      amount: PromiseOrValue<BigNumberish>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateTokenAmount(
      usdValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateTokenAmountForETH(
      ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canPurchase(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentPhase(overrides?: CallOverrides): Promise<BigNumber>;

    endCurrentPhase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    ethUsdPrice(overrides?: CallOverrides): Promise<BigNumber>;

    finalizePresale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getClaimableAmount(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentPhaseInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getPhaseInfo(
      phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferralInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalTokensSold(overrides?: CallOverrides): Promise<BigNumber>;

    getUserPurchases(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestingSchedule(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasBeenReferred(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializePhases(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isPhaseActive(overrides?: CallOverrides): Promise<BigNumber>;

    lastPurchaseTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    phases(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    presaleFinalized(overrides?: CallOverrides): Promise<BigNumber>;

    presaleStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    referrals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEthUsdPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startPhase(
      phaseId: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startPresale(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalPurchasedVLR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalRaisedUSD(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usdcToken(overrides?: CallOverrides): Promise<BigNumber>;

    usdtToken(overrides?: CallOverrides): Promise<BigNumber>;

    userPurchases(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vestingSchedules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vlrToken(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawUSDC(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawUSDT(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_PER_TRANSACTION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PER_WALLET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MONTH_1_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MONTH_2_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PURCHASE_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REFERRAL_BONUS_BPS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TGE_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VESTING_INTERVAL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyWithETH(
      referrer: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyWithUSDC(
      amount: PromiseOrValue<BigNumberish>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyWithUSDT(
      amount: PromiseOrValue<BigNumberish>,
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateTokenAmount(
      usdValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateTokenAmountForETH(
      ethAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canPurchase(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimTokens(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentPhase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endCurrentPhase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    ethUsdPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalizePresale(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getClaimableAmount(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPhaseInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPhaseInfo(
      phaseId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferralInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalTokensSold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserPurchases(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestingSchedule(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasBeenReferred(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializePhases(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isPhaseActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastPurchaseTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    phases(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    presaleFinalized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presaleStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referrals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEthUsdPrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startPhase(
      phaseId: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startPresale(
      duration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalPurchasedVLR(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalRaisedUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usdcToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdtToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userPurchases(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vestingSchedules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vlrToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUSDC(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawUSDT(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
