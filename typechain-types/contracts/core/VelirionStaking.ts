/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IVelirionStaking {
  export type UserStakingInfoStruct = {
    totalStaked: PromiseOrValue<BigNumberish>;
    totalRewardsClaimed: PromiseOrValue<BigNumberish>;
    activeStakes: PromiseOrValue<BigNumberish>;
    stakingPower: PromiseOrValue<BigNumberish>;
  };

  export type UserStakingInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    totalStaked: BigNumber;
    totalRewardsClaimed: BigNumber;
    activeStakes: BigNumber;
    stakingPower: BigNumber;
  };
}

export interface VelirionStakingInterface extends utils.Interface {
  functions: {
    "BASIS_POINTS()": FunctionFragment;
    "ELITE_APR()": FunctionFragment;
    "ELITE_LOCK()": FunctionFragment;
    "ELITE_PENALTY()": FunctionFragment;
    "ELITE_RENEWED_APR()": FunctionFragment;
    "FLEXIBLE_APR()": FunctionFragment;
    "FLEXIBLE_LOCK()": FunctionFragment;
    "LONG_APR()": FunctionFragment;
    "LONG_LOCK()": FunctionFragment;
    "LONG_PENALTY()": FunctionFragment;
    "LONG_RENEWED_APR()": FunctionFragment;
    "MEDIUM_MAX_APR()": FunctionFragment;
    "MEDIUM_MAX_LOCK()": FunctionFragment;
    "MEDIUM_MIN_APR()": FunctionFragment;
    "MEDIUM_MIN_LOCK()": FunctionFragment;
    "MEDIUM_PENALTY()": FunctionFragment;
    "MIN_ELITE_STAKE()": FunctionFragment;
    "MIN_FLEXIBLE_STAKE()": FunctionFragment;
    "MIN_LONG_STAKE()": FunctionFragment;
    "MIN_MEDIUM_STAKE()": FunctionFragment;
    "RENEWAL_BONUS()": FunctionFragment;
    "SECONDS_PER_YEAR()": FunctionFragment;
    "calculatePenalty(address,uint256)": FunctionFragment;
    "calculateRewards(address,uint256)": FunctionFragment;
    "canUnstakeWithoutPenalty(address,uint256)": FunctionFragment;
    "claimRewards(uint256)": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "getContractStats()": FunctionFragment;
    "getMaximumLock(uint8)": FunctionFragment;
    "getMinimumLock(uint8)": FunctionFragment;
    "getMinimumStake(uint8)": FunctionFragment;
    "getStakeInfo(address,uint256)": FunctionFragment;
    "getTotalStaked()": FunctionFragment;
    "getUserStakes(address)": FunctionFragment;
    "getUserStakingInfo(address)": FunctionFragment;
    "getVotingPower(address)": FunctionFragment;
    "nextStakeId(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "referralContract()": FunctionFragment;
    "renewStake(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setReferralContract(address)": FunctionFragment;
    "stake(uint256,uint8,uint256)": FunctionFragment;
    "stakes(address,uint256)": FunctionFragment;
    "totalRewardsDistributed()": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "totalStakers()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "userStakingInfo(address)": FunctionFragment;
    "vlrToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASIS_POINTS"
      | "ELITE_APR"
      | "ELITE_LOCK"
      | "ELITE_PENALTY"
      | "ELITE_RENEWED_APR"
      | "FLEXIBLE_APR"
      | "FLEXIBLE_LOCK"
      | "LONG_APR"
      | "LONG_LOCK"
      | "LONG_PENALTY"
      | "LONG_RENEWED_APR"
      | "MEDIUM_MAX_APR"
      | "MEDIUM_MAX_LOCK"
      | "MEDIUM_MIN_APR"
      | "MEDIUM_MIN_LOCK"
      | "MEDIUM_PENALTY"
      | "MIN_ELITE_STAKE"
      | "MIN_FLEXIBLE_STAKE"
      | "MIN_LONG_STAKE"
      | "MIN_MEDIUM_STAKE"
      | "RENEWAL_BONUS"
      | "SECONDS_PER_YEAR"
      | "calculatePenalty"
      | "calculateRewards"
      | "canUnstakeWithoutPenalty"
      | "claimRewards"
      | "emergencyWithdraw"
      | "getContractStats"
      | "getMaximumLock"
      | "getMinimumLock"
      | "getMinimumStake"
      | "getStakeInfo"
      | "getTotalStaked"
      | "getUserStakes"
      | "getUserStakingInfo"
      | "getVotingPower"
      | "nextStakeId"
      | "owner"
      | "pause"
      | "paused"
      | "referralContract"
      | "renewStake"
      | "renounceOwnership"
      | "setReferralContract"
      | "stake"
      | "stakes"
      | "totalRewardsDistributed"
      | "totalStaked"
      | "totalStakers"
      | "transferOwnership"
      | "unpause"
      | "unstake"
      | "userStakingInfo"
      | "vlrToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ELITE_APR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ELITE_LOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ELITE_PENALTY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ELITE_RENEWED_APR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FLEXIBLE_APR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FLEXIBLE_LOCK",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LONG_APR", values?: undefined): string;
  encodeFunctionData(functionFragment: "LONG_LOCK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LONG_PENALTY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LONG_RENEWED_APR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MEDIUM_MAX_APR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MEDIUM_MAX_LOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MEDIUM_MIN_APR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MEDIUM_MIN_LOCK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MEDIUM_PENALTY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_ELITE_STAKE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_FLEXIBLE_STAKE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_LONG_STAKE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_MEDIUM_STAKE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RENEWAL_BONUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SECONDS_PER_YEAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePenalty",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRewards",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "canUnstakeWithoutPenalty",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaximumLock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumLock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumStake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakingInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingPower",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nextStakeId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "referralContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renewStake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stakes",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewardsDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userStakingInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "vlrToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ELITE_APR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ELITE_LOCK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ELITE_PENALTY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ELITE_RENEWED_APR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FLEXIBLE_APR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FLEXIBLE_LOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LONG_APR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LONG_LOCK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LONG_PENALTY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LONG_RENEWED_APR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MEDIUM_MAX_APR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MEDIUM_MAX_LOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MEDIUM_MIN_APR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MEDIUM_MIN_LOCK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MEDIUM_PENALTY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_ELITE_STAKE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_FLEXIBLE_STAKE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_LONG_STAKE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_MEDIUM_STAKE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RENEWAL_BONUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SECONDS_PER_YEAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canUnstakeWithoutPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaximumLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextStakeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referralContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renewStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferralContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardsDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userStakingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vlrToken", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "ReferralContractUpdated(address)": EventFragment;
    "RewardsClaimed(address,uint256,uint256,uint256)": EventFragment;
    "StakeRenewed(address,uint256,uint16,uint16)": EventFragment;
    "Staked(address,uint256,uint256,uint8,uint256,uint16)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Unstaked(address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralContractUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeRenewed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface ReferralContractUpdatedEventObject {
  newReferralContract: string;
}
export type ReferralContractUpdatedEvent = TypedEvent<
  [string],
  ReferralContractUpdatedEventObject
>;

export type ReferralContractUpdatedEventFilter =
  TypedEventFilter<ReferralContractUpdatedEvent>;

export interface RewardsClaimedEventObject {
  user: string;
  stakeId: BigNumber;
  rewards: BigNumber;
  referralBonus: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface StakeRenewedEventObject {
  user: string;
  stakeId: BigNumber;
  oldApr: number;
  newApr: number;
}
export type StakeRenewedEvent = TypedEvent<
  [string, BigNumber, number, number],
  StakeRenewedEventObject
>;

export type StakeRenewedEventFilter = TypedEventFilter<StakeRenewedEvent>;

export interface StakedEventObject {
  user: string;
  stakeId: BigNumber;
  amount: BigNumber;
  tier: number;
  lockDuration: BigNumber;
  apr: number;
}
export type StakedEvent = TypedEvent<
  [string, BigNumber, BigNumber, number, BigNumber, number],
  StakedEventObject
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UnstakedEventObject {
  user: string;
  stakeId: BigNumber;
  amount: BigNumber;
  penalty: BigNumber;
  netAmount: BigNumber;
}
export type UnstakedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  UnstakedEventObject
>;

export type UnstakedEventFilter = TypedEventFilter<UnstakedEvent>;

export interface VelirionStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VelirionStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    ELITE_APR(overrides?: CallOverrides): Promise<[number]>;

    ELITE_LOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    ELITE_PENALTY(overrides?: CallOverrides): Promise<[number]>;

    ELITE_RENEWED_APR(overrides?: CallOverrides): Promise<[number]>;

    FLEXIBLE_APR(overrides?: CallOverrides): Promise<[number]>;

    FLEXIBLE_LOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    LONG_APR(overrides?: CallOverrides): Promise<[number]>;

    LONG_LOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    LONG_PENALTY(overrides?: CallOverrides): Promise<[number]>;

    LONG_RENEWED_APR(overrides?: CallOverrides): Promise<[number]>;

    MEDIUM_MAX_APR(overrides?: CallOverrides): Promise<[number]>;

    MEDIUM_MAX_LOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    MEDIUM_MIN_APR(overrides?: CallOverrides): Promise<[number]>;

    MEDIUM_MIN_LOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    MEDIUM_PENALTY(overrides?: CallOverrides): Promise<[number]>;

    MIN_ELITE_STAKE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_FLEXIBLE_STAKE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_LONG_STAKE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_MEDIUM_STAKE(overrides?: CallOverrides): Promise<[BigNumber]>;

    RENEWAL_BONUS(overrides?: CallOverrides): Promise<[number]>;

    SECONDS_PER_YEAR(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculatePenalty(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateRewards(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canUnstakeWithoutPenalty(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimRewards(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getContractStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _totalStaked: BigNumber;
        _totalStakers: BigNumber;
        _totalRewardsDistributed: BigNumber;
        contractBalance: BigNumber;
      }
    >;

    getMaximumLock(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinimumLock(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinimumStake(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakeInfo(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, number, boolean, boolean] & {
        amount: BigNumber;
        startTime: BigNumber;
        lockDuration: BigNumber;
        tier: number;
        apr: number;
        renewed: boolean;
        active: boolean;
      }
    >;

    getTotalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserStakes(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getUserStakingInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IVelirionStaking.UserStakingInfoStructOutput]>;

    getVotingPower(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nextStakeId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    referralContract(overrides?: CallOverrides): Promise<[string]>;

    renewStake(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReferralContract(
      _referralContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        boolean,
        boolean
      ] & {
        amount: BigNumber;
        startTime: BigNumber;
        lockDuration: BigNumber;
        lastClaimTime: BigNumber;
        tier: number;
        apr: number;
        renewed: boolean;
        active: boolean;
      }
    >;

    totalRewardsDistributed(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStakers(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstake(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userStakingInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalStaked: BigNumber;
        totalRewardsClaimed: BigNumber;
        activeStakes: BigNumber;
        stakingPower: BigNumber;
      }
    >;

    vlrToken(overrides?: CallOverrides): Promise<[string]>;
  };

  BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  ELITE_APR(overrides?: CallOverrides): Promise<number>;

  ELITE_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

  ELITE_PENALTY(overrides?: CallOverrides): Promise<number>;

  ELITE_RENEWED_APR(overrides?: CallOverrides): Promise<number>;

  FLEXIBLE_APR(overrides?: CallOverrides): Promise<number>;

  FLEXIBLE_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

  LONG_APR(overrides?: CallOverrides): Promise<number>;

  LONG_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

  LONG_PENALTY(overrides?: CallOverrides): Promise<number>;

  LONG_RENEWED_APR(overrides?: CallOverrides): Promise<number>;

  MEDIUM_MAX_APR(overrides?: CallOverrides): Promise<number>;

  MEDIUM_MAX_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

  MEDIUM_MIN_APR(overrides?: CallOverrides): Promise<number>;

  MEDIUM_MIN_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

  MEDIUM_PENALTY(overrides?: CallOverrides): Promise<number>;

  MIN_ELITE_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_FLEXIBLE_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_LONG_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_MEDIUM_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

  RENEWAL_BONUS(overrides?: CallOverrides): Promise<number>;

  SECONDS_PER_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

  calculatePenalty(
    user: PromiseOrValue<string>,
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateRewards(
    user: PromiseOrValue<string>,
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canUnstakeWithoutPenalty(
    user: PromiseOrValue<string>,
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimRewards(
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getContractStats(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      _totalStaked: BigNumber;
      _totalStakers: BigNumber;
      _totalRewardsDistributed: BigNumber;
      contractBalance: BigNumber;
    }
  >;

  getMaximumLock(
    tier: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinimumLock(
    tier: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinimumStake(
    tier: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakeInfo(
    user: PromiseOrValue<string>,
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number, number, boolean, boolean] & {
      amount: BigNumber;
      startTime: BigNumber;
      lockDuration: BigNumber;
      tier: number;
      apr: number;
      renewed: boolean;
      active: boolean;
    }
  >;

  getTotalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  getUserStakes(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUserStakingInfo(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IVelirionStaking.UserStakingInfoStructOutput>;

  getVotingPower(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nextStakeId(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  referralContract(overrides?: CallOverrides): Promise<string>;

  renewStake(
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReferralContract(
    _referralContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: PromiseOrValue<BigNumberish>,
    tier: PromiseOrValue<BigNumberish>,
    lockDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakes(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number,
      boolean,
      boolean
    ] & {
      amount: BigNumber;
      startTime: BigNumber;
      lockDuration: BigNumber;
      lastClaimTime: BigNumber;
      tier: number;
      apr: number;
      renewed: boolean;
      active: boolean;
    }
  >;

  totalRewardsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  totalStakers(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstake(
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userStakingInfo(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalStaked: BigNumber;
      totalRewardsClaimed: BigNumber;
      activeStakes: BigNumber;
      stakingPower: BigNumber;
    }
  >;

  vlrToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    ELITE_APR(overrides?: CallOverrides): Promise<number>;

    ELITE_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    ELITE_PENALTY(overrides?: CallOverrides): Promise<number>;

    ELITE_RENEWED_APR(overrides?: CallOverrides): Promise<number>;

    FLEXIBLE_APR(overrides?: CallOverrides): Promise<number>;

    FLEXIBLE_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    LONG_APR(overrides?: CallOverrides): Promise<number>;

    LONG_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    LONG_PENALTY(overrides?: CallOverrides): Promise<number>;

    LONG_RENEWED_APR(overrides?: CallOverrides): Promise<number>;

    MEDIUM_MAX_APR(overrides?: CallOverrides): Promise<number>;

    MEDIUM_MAX_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    MEDIUM_MIN_APR(overrides?: CallOverrides): Promise<number>;

    MEDIUM_MIN_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    MEDIUM_PENALTY(overrides?: CallOverrides): Promise<number>;

    MIN_ELITE_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_FLEXIBLE_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LONG_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_MEDIUM_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

    RENEWAL_BONUS(overrides?: CallOverrides): Promise<number>;

    SECONDS_PER_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePenalty(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRewards(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canUnstakeWithoutPenalty(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimRewards(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getContractStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        _totalStaked: BigNumber;
        _totalStakers: BigNumber;
        _totalRewardsDistributed: BigNumber;
        contractBalance: BigNumber;
      }
    >;

    getMaximumLock(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumLock(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumStake(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeInfo(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, number, boolean, boolean] & {
        amount: BigNumber;
        startTime: BigNumber;
        lockDuration: BigNumber;
        tier: number;
        apr: number;
        renewed: boolean;
        active: boolean;
      }
    >;

    getTotalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    getUserStakes(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUserStakingInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IVelirionStaking.UserStakingInfoStructOutput>;

    getVotingPower(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextStakeId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    referralContract(overrides?: CallOverrides): Promise<string>;

    renewStake(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setReferralContract(
      _referralContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        boolean,
        boolean
      ] & {
        amount: BigNumber;
        startTime: BigNumber;
        lockDuration: BigNumber;
        lastClaimTime: BigNumber;
        tier: number;
        apr: number;
        renewed: boolean;
        active: boolean;
      }
    >;

    totalRewardsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakers(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    unstake(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    userStakingInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalStaked: BigNumber;
        totalRewardsClaimed: BigNumber;
        activeStakes: BigNumber;
        stakingPower: BigNumber;
      }
    >;

    vlrToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "ReferralContractUpdated(address)"(
      newReferralContract?: PromiseOrValue<string> | null
    ): ReferralContractUpdatedEventFilter;
    ReferralContractUpdated(
      newReferralContract?: PromiseOrValue<string> | null
    ): ReferralContractUpdatedEventFilter;

    "RewardsClaimed(address,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      rewards?: null,
      referralBonus?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      user?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      rewards?: null,
      referralBonus?: null
    ): RewardsClaimedEventFilter;

    "StakeRenewed(address,uint256,uint16,uint16)"(
      user?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      oldApr?: null,
      newApr?: null
    ): StakeRenewedEventFilter;
    StakeRenewed(
      user?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      oldApr?: null,
      newApr?: null
    ): StakeRenewedEventFilter;

    "Staked(address,uint256,uint256,uint8,uint256,uint16)"(
      user?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      tier?: null,
      lockDuration?: null,
      apr?: null
    ): StakedEventFilter;
    Staked(
      user?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      tier?: null,
      lockDuration?: null,
      apr?: null
    ): StakedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Unstaked(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      penalty?: null,
      netAmount?: null
    ): UnstakedEventFilter;
    Unstaked(
      user?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      penalty?: null,
      netAmount?: null
    ): UnstakedEventFilter;
  };

  estimateGas: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    ELITE_APR(overrides?: CallOverrides): Promise<BigNumber>;

    ELITE_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    ELITE_PENALTY(overrides?: CallOverrides): Promise<BigNumber>;

    ELITE_RENEWED_APR(overrides?: CallOverrides): Promise<BigNumber>;

    FLEXIBLE_APR(overrides?: CallOverrides): Promise<BigNumber>;

    FLEXIBLE_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    LONG_APR(overrides?: CallOverrides): Promise<BigNumber>;

    LONG_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    LONG_PENALTY(overrides?: CallOverrides): Promise<BigNumber>;

    LONG_RENEWED_APR(overrides?: CallOverrides): Promise<BigNumber>;

    MEDIUM_MAX_APR(overrides?: CallOverrides): Promise<BigNumber>;

    MEDIUM_MAX_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    MEDIUM_MIN_APR(overrides?: CallOverrides): Promise<BigNumber>;

    MEDIUM_MIN_LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    MEDIUM_PENALTY(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_ELITE_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_FLEXIBLE_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_LONG_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_MEDIUM_STAKE(overrides?: CallOverrides): Promise<BigNumber>;

    RENEWAL_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

    SECONDS_PER_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    calculatePenalty(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRewards(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canUnstakeWithoutPenalty(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getContractStats(overrides?: CallOverrides): Promise<BigNumber>;

    getMaximumLock(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumLock(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumStake(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeInfo(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    getUserStakes(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStakingInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingPower(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextStakeId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    referralContract(overrides?: CallOverrides): Promise<BigNumber>;

    renewStake(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReferralContract(
      _referralContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalRewardsDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakers(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstake(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userStakingInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vlrToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ELITE_APR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ELITE_LOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ELITE_PENALTY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ELITE_RENEWED_APR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FLEXIBLE_APR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FLEXIBLE_LOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LONG_APR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LONG_LOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LONG_PENALTY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LONG_RENEWED_APR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MEDIUM_MAX_APR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MEDIUM_MAX_LOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MEDIUM_MIN_APR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MEDIUM_MIN_LOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MEDIUM_PENALTY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_ELITE_STAKE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_FLEXIBLE_STAKE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_LONG_STAKE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_MEDIUM_STAKE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RENEWAL_BONUS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SECONDS_PER_YEAR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculatePenalty(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRewards(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canUnstakeWithoutPenalty(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRewards(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getContractStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaximumLock(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumLock(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumStake(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeInfo(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserStakes(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStakingInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingPower(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextStakeId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referralContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renewStake(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReferralContract(
      _referralContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalRewardsDistributed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userStakingInfo(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vlrToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
