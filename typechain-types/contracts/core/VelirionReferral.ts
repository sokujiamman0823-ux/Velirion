/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IVelirionReferral {
  export type ReferralStatsStruct = {
    totalVolume: PromiseOrValue<BigNumberish>;
    totalStakingVolume: PromiseOrValue<BigNumberish>;
    directReferrals: PromiseOrValue<string>[];
  };

  export type ReferralStatsStructOutput = [BigNumber, BigNumber, string[]] & {
    totalVolume: BigNumber;
    totalStakingVolume: BigNumber;
    directReferrals: string[];
  };

  export type ReferrerStruct = {
    addr: PromiseOrValue<string>;
    level: PromiseOrValue<BigNumberish>;
    directReferrals: PromiseOrValue<BigNumberish>;
    totalEarned: PromiseOrValue<BigNumberish>;
    purchaseBonusEarned: PromiseOrValue<BigNumberish>;
    stakingBonusEarned: PromiseOrValue<BigNumberish>;
    registrationTime: PromiseOrValue<BigNumberish>;
    isActive: PromiseOrValue<boolean>;
  };

  export type ReferrerStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    addr: string;
    level: BigNumber;
    directReferrals: BigNumber;
    totalEarned: BigNumber;
    purchaseBonusEarned: BigNumber;
    stakingBonusEarned: BigNumber;
    registrationTime: BigNumber;
    isActive: boolean;
  };
}

export interface VelirionReferralInterface extends utils.Interface {
  functions: {
    "BASIS_POINTS()": FunctionFragment;
    "MAX_TIER()": FunctionFragment;
    "TIER_1_PURCHASE_BONUS()": FunctionFragment;
    "TIER_1_STAKING_BONUS()": FunctionFragment;
    "TIER_2_PURCHASE_BONUS()": FunctionFragment;
    "TIER_2_STAKING_BONUS()": FunctionFragment;
    "TIER_2_THRESHOLD()": FunctionFragment;
    "TIER_3_PURCHASE_BONUS()": FunctionFragment;
    "TIER_3_STAKING_BONUS()": FunctionFragment;
    "TIER_3_THRESHOLD()": FunctionFragment;
    "TIER_4_PURCHASE_BONUS()": FunctionFragment;
    "TIER_4_STAKING_BONUS()": FunctionFragment;
    "TIER_4_THRESHOLD()": FunctionFragment;
    "authorizedContracts(address)": FunctionFragment;
    "claimRewards()": FunctionFragment;
    "distributePurchaseBonus(address,uint256)": FunctionFragment;
    "distributeStakingBonus(address,uint256)": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "getContractStats()": FunctionFragment;
    "getDirectReferrals(address)": FunctionFragment;
    "getNextTierThreshold(uint256)": FunctionFragment;
    "getPendingRewards(address)": FunctionFragment;
    "getReferralStats(address)": FunctionFragment;
    "getReferrer(address)": FunctionFragment;
    "getReferrerData(address)": FunctionFragment;
    "getReferrerInfo(address)": FunctionFragment;
    "getTierBonuses(uint256)": FunctionFragment;
    "getTierName(uint256)": FunctionFragment;
    "isAuthorizedContract(address)": FunctionFragment;
    "manualTierUpgrade(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingRewards(address)": FunctionFragment;
    "referredBy(address)": FunctionFragment;
    "referrers(address)": FunctionFragment;
    "register(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAuthorizedContract(address,bool)": FunctionFragment;
    "totalBonusesDistributed()": FunctionFragment;
    "totalReferrers()": FunctionFragment;
    "totalRewardsClaimed()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "vlrToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASIS_POINTS"
      | "MAX_TIER"
      | "TIER_1_PURCHASE_BONUS"
      | "TIER_1_STAKING_BONUS"
      | "TIER_2_PURCHASE_BONUS"
      | "TIER_2_STAKING_BONUS"
      | "TIER_2_THRESHOLD"
      | "TIER_3_PURCHASE_BONUS"
      | "TIER_3_STAKING_BONUS"
      | "TIER_3_THRESHOLD"
      | "TIER_4_PURCHASE_BONUS"
      | "TIER_4_STAKING_BONUS"
      | "TIER_4_THRESHOLD"
      | "authorizedContracts"
      | "claimRewards"
      | "distributePurchaseBonus"
      | "distributeStakingBonus"
      | "emergencyWithdraw"
      | "getContractStats"
      | "getDirectReferrals"
      | "getNextTierThreshold"
      | "getPendingRewards"
      | "getReferralStats"
      | "getReferrer"
      | "getReferrerData"
      | "getReferrerInfo"
      | "getTierBonuses"
      | "getTierName"
      | "isAuthorizedContract"
      | "manualTierUpgrade"
      | "owner"
      | "pause"
      | "paused"
      | "pendingRewards"
      | "referredBy"
      | "referrers"
      | "register"
      | "renounceOwnership"
      | "setAuthorizedContract"
      | "totalBonusesDistributed"
      | "totalReferrers"
      | "totalRewardsClaimed"
      | "transferOwnership"
      | "unpause"
      | "vlrToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_TIER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TIER_1_PURCHASE_BONUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIER_1_STAKING_BONUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIER_2_PURCHASE_BONUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIER_2_STAKING_BONUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIER_2_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIER_3_PURCHASE_BONUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIER_3_STAKING_BONUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIER_3_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIER_4_PURCHASE_BONUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIER_4_STAKING_BONUS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TIER_4_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedContracts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributePurchaseBonus",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeStakingBonus",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDirectReferrals",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextTierThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralStats",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferrer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferrerData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferrerInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTierBonuses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTierName",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "manualTierUpgrade",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "referredBy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "referrers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedContract",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBonusesDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalReferrers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalRewardsClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "vlrToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_TIER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TIER_1_PURCHASE_BONUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIER_1_STAKING_BONUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIER_2_PURCHASE_BONUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIER_2_STAKING_BONUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIER_2_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIER_3_PURCHASE_BONUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIER_3_STAKING_BONUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIER_3_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIER_4_PURCHASE_BONUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIER_4_STAKING_BONUS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TIER_4_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributePurchaseBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeStakingBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDirectReferrals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextTierThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferrerData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferrerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTierBonuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTierName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "manualTierUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "referredBy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "referrers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBonusesDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReferrers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalRewardsClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vlrToken", data: BytesLike): Result;

  events: {
    "AuthorizedContractUpdated(address,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PurchaseBonusDistributed(address,address,uint256)": EventFragment;
    "ReferralRegistered(address,address)": EventFragment;
    "RewardsClaimed(address,uint256)": EventFragment;
    "StakingBonusDistributed(address,address,uint256)": EventFragment;
    "TierUpgraded(address,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorizedContractUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseBonusDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingBonusDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TierUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AuthorizedContractUpdatedEventObject {
  contractAddress: string;
  status: boolean;
}
export type AuthorizedContractUpdatedEvent = TypedEvent<
  [string, boolean],
  AuthorizedContractUpdatedEventObject
>;

export type AuthorizedContractUpdatedEventFilter =
  TypedEventFilter<AuthorizedContractUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PurchaseBonusDistributedEventObject {
  referrer: string;
  buyer: string;
  bonusAmount: BigNumber;
}
export type PurchaseBonusDistributedEvent = TypedEvent<
  [string, string, BigNumber],
  PurchaseBonusDistributedEventObject
>;

export type PurchaseBonusDistributedEventFilter =
  TypedEventFilter<PurchaseBonusDistributedEvent>;

export interface ReferralRegisteredEventObject {
  user: string;
  referrer: string;
}
export type ReferralRegisteredEvent = TypedEvent<
  [string, string],
  ReferralRegisteredEventObject
>;

export type ReferralRegisteredEventFilter =
  TypedEventFilter<ReferralRegisteredEvent>;

export interface RewardsClaimedEventObject {
  referrer: string;
  amount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface StakingBonusDistributedEventObject {
  referrer: string;
  staker: string;
  bonusAmount: BigNumber;
}
export type StakingBonusDistributedEvent = TypedEvent<
  [string, string, BigNumber],
  StakingBonusDistributedEventObject
>;

export type StakingBonusDistributedEventFilter =
  TypedEventFilter<StakingBonusDistributedEvent>;

export interface TierUpgradedEventObject {
  referrer: string;
  oldTier: BigNumber;
  newTier: BigNumber;
}
export type TierUpgradedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TierUpgradedEventObject
>;

export type TierUpgradedEventFilter = TypedEventFilter<TierUpgradedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface VelirionReferral extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VelirionReferralInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_TIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIER_1_PURCHASE_BONUS(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIER_1_STAKING_BONUS(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIER_2_PURCHASE_BONUS(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIER_2_STAKING_BONUS(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIER_2_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIER_3_PURCHASE_BONUS(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIER_3_STAKING_BONUS(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIER_3_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIER_4_PURCHASE_BONUS(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIER_4_STAKING_BONUS(overrides?: CallOverrides): Promise<[BigNumber]>;

    TIER_4_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;

    authorizedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributePurchaseBonus(
      buyer: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeStakingBonus(
      staker: PromiseOrValue<string>,
      rewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getContractStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalReferrers_: BigNumber;
        totalBonusesDistributed_: BigNumber;
        totalRewardsClaimed_: BigNumber;
        contractBalance: BigNumber;
      }
    >;

    getDirectReferrals(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getNextTierThreshold(
      currentTier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPendingRewards(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReferralStats(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IVelirionReferral.ReferralStatsStructOutput]>;

    getReferrer(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getReferrerData(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IVelirionReferral.ReferrerStructOutput]>;

    getReferrerInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        level: BigNumber;
        directReferrals: BigNumber;
        totalEarned: BigNumber;
      }
    >;

    getTierBonuses(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        purchaseBonus: BigNumber;
        stakingBonus: BigNumber;
      }
    >;

    getTierName(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isAuthorizedContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    manualTierUpgrade(
      user: PromiseOrValue<string>,
      newTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    referredBy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    referrers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        addr: string;
        level: BigNumber;
        directReferrals: BigNumber;
        totalEarned: BigNumber;
        purchaseBonusEarned: BigNumber;
        stakingBonusEarned: BigNumber;
        registrationTime: BigNumber;
        isActive: boolean;
      }
    >;

    register(
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAuthorizedContract(
      contractAddress: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalBonusesDistributed(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalReferrers(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalRewardsClaimed(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vlrToken(overrides?: CallOverrides): Promise<[string]>;
  };

  BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_TIER(overrides?: CallOverrides): Promise<BigNumber>;

  TIER_1_PURCHASE_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

  TIER_1_STAKING_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

  TIER_2_PURCHASE_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

  TIER_2_STAKING_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

  TIER_2_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  TIER_3_PURCHASE_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

  TIER_3_STAKING_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

  TIER_3_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  TIER_4_PURCHASE_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

  TIER_4_STAKING_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

  TIER_4_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  authorizedContracts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributePurchaseBonus(
    buyer: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeStakingBonus(
    staker: PromiseOrValue<string>,
    rewardAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getContractStats(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalReferrers_: BigNumber;
      totalBonusesDistributed_: BigNumber;
      totalRewardsClaimed_: BigNumber;
      contractBalance: BigNumber;
    }
  >;

  getDirectReferrals(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getNextTierThreshold(
    currentTier: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingRewards(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReferralStats(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IVelirionReferral.ReferralStatsStructOutput>;

  getReferrer(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getReferrerData(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IVelirionReferral.ReferrerStructOutput>;

  getReferrerInfo(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      level: BigNumber;
      directReferrals: BigNumber;
      totalEarned: BigNumber;
    }
  >;

  getTierBonuses(
    tier: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      purchaseBonus: BigNumber;
      stakingBonus: BigNumber;
    }
  >;

  getTierName(
    tier: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  isAuthorizedContract(
    contractAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  manualTierUpgrade(
    user: PromiseOrValue<string>,
    newTier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingRewards(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  referredBy(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  referrers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      addr: string;
      level: BigNumber;
      directReferrals: BigNumber;
      totalEarned: BigNumber;
      purchaseBonusEarned: BigNumber;
      stakingBonusEarned: BigNumber;
      registrationTime: BigNumber;
      isActive: boolean;
    }
  >;

  register(
    referrer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAuthorizedContract(
    contractAddress: PromiseOrValue<string>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalBonusesDistributed(overrides?: CallOverrides): Promise<BigNumber>;

  totalReferrers(overrides?: CallOverrides): Promise<BigNumber>;

  totalRewardsClaimed(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vlrToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TIER(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_1_PURCHASE_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_1_STAKING_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_2_PURCHASE_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_2_STAKING_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_2_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_3_PURCHASE_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_3_STAKING_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_3_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_4_PURCHASE_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_4_STAKING_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_4_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    authorizedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimRewards(overrides?: CallOverrides): Promise<void>;

    distributePurchaseBonus(
      buyer: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeStakingBonus(
      staker: PromiseOrValue<string>,
      rewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getContractStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalReferrers_: BigNumber;
        totalBonusesDistributed_: BigNumber;
        totalRewardsClaimed_: BigNumber;
        contractBalance: BigNumber;
      }
    >;

    getDirectReferrals(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getNextTierThreshold(
      currentTier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingRewards(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferralStats(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IVelirionReferral.ReferralStatsStructOutput>;

    getReferrer(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getReferrerData(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IVelirionReferral.ReferrerStructOutput>;

    getReferrerInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        level: BigNumber;
        directReferrals: BigNumber;
        totalEarned: BigNumber;
      }
    >;

    getTierBonuses(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        purchaseBonus: BigNumber;
        stakingBonus: BigNumber;
      }
    >;

    getTierName(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    isAuthorizedContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    manualTierUpgrade(
      user: PromiseOrValue<string>,
      newTier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referredBy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    referrers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        addr: string;
        level: BigNumber;
        directReferrals: BigNumber;
        totalEarned: BigNumber;
        purchaseBonusEarned: BigNumber;
        stakingBonusEarned: BigNumber;
        registrationTime: BigNumber;
        isActive: boolean;
      }
    >;

    register(
      referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAuthorizedContract(
      contractAddress: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalBonusesDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    totalReferrers(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewardsClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    vlrToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AuthorizedContractUpdated(address,bool)"(
      contractAddress?: PromiseOrValue<string> | null,
      status?: null
    ): AuthorizedContractUpdatedEventFilter;
    AuthorizedContractUpdated(
      contractAddress?: PromiseOrValue<string> | null,
      status?: null
    ): AuthorizedContractUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PurchaseBonusDistributed(address,address,uint256)"(
      referrer?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null,
      bonusAmount?: null
    ): PurchaseBonusDistributedEventFilter;
    PurchaseBonusDistributed(
      referrer?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null,
      bonusAmount?: null
    ): PurchaseBonusDistributedEventFilter;

    "ReferralRegistered(address,address)"(
      user?: PromiseOrValue<string> | null,
      referrer?: PromiseOrValue<string> | null
    ): ReferralRegisteredEventFilter;
    ReferralRegistered(
      user?: PromiseOrValue<string> | null,
      referrer?: PromiseOrValue<string> | null
    ): ReferralRegisteredEventFilter;

    "RewardsClaimed(address,uint256)"(
      referrer?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      referrer?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardsClaimedEventFilter;

    "StakingBonusDistributed(address,address,uint256)"(
      referrer?: PromiseOrValue<string> | null,
      staker?: PromiseOrValue<string> | null,
      bonusAmount?: null
    ): StakingBonusDistributedEventFilter;
    StakingBonusDistributed(
      referrer?: PromiseOrValue<string> | null,
      staker?: PromiseOrValue<string> | null,
      bonusAmount?: null
    ): StakingBonusDistributedEventFilter;

    "TierUpgraded(address,uint256,uint256)"(
      referrer?: PromiseOrValue<string> | null,
      oldTier?: null,
      newTier?: null
    ): TierUpgradedEventFilter;
    TierUpgraded(
      referrer?: PromiseOrValue<string> | null,
      oldTier?: null,
      newTier?: null
    ): TierUpgradedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TIER(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_1_PURCHASE_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_1_STAKING_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_2_PURCHASE_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_2_STAKING_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_2_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_3_PURCHASE_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_3_STAKING_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_3_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_4_PURCHASE_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_4_STAKING_BONUS(overrides?: CallOverrides): Promise<BigNumber>;

    TIER_4_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    authorizedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributePurchaseBonus(
      buyer: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeStakingBonus(
      staker: PromiseOrValue<string>,
      rewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getContractStats(overrides?: CallOverrides): Promise<BigNumber>;

    getDirectReferrals(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNextTierThreshold(
      currentTier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingRewards(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferralStats(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferrer(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferrerData(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferrerInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTierBonuses(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTierName(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuthorizedContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    manualTierUpgrade(
      user: PromiseOrValue<string>,
      newTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referredBy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    referrers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAuthorizedContract(
      contractAddress: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalBonusesDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    totalReferrers(overrides?: CallOverrides): Promise<BigNumber>;

    totalRewardsClaimed(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vlrToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_TIER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TIER_1_PURCHASE_BONUS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TIER_1_STAKING_BONUS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TIER_2_PURCHASE_BONUS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TIER_2_STAKING_BONUS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TIER_2_THRESHOLD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TIER_3_PURCHASE_BONUS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TIER_3_STAKING_BONUS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TIER_3_THRESHOLD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TIER_4_PURCHASE_BONUS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TIER_4_STAKING_BONUS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TIER_4_THRESHOLD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authorizedContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributePurchaseBonus(
      buyer: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeStakingBonus(
      staker: PromiseOrValue<string>,
      rewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getContractStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDirectReferrals(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNextTierThreshold(
      currentTier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingRewards(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferralStats(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferrer(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferrerData(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferrerInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTierBonuses(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTierName(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuthorizedContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manualTierUpgrade(
      user: PromiseOrValue<string>,
      newTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingRewards(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referredBy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referrers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAuthorizedContract(
      contractAddress: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalBonusesDistributed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalReferrers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRewardsClaimed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vlrToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
