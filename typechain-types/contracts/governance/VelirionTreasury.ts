/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface VelirionTreasuryInterface extends utils.Interface {
  functions: {
    "allocateFunds(address,uint256,string)": FunctionFragment;
    "allocatedFunds(address)": FunctionFragment;
    "batchAllocateFunds(address[],uint256[],string[])": FunctionFragment;
    "daoContract()": FunctionFragment;
    "emergencyWithdraw(address,address,uint256)": FunctionFragment;
    "getAllocatedFunds(address)": FunctionFragment;
    "getTreasuryBalance()": FunctionFragment;
    "getTreasuryStats()": FunctionFragment;
    "getWallets()": FunctionFragment;
    "liquidityWallet()": FunctionFragment;
    "marketingWallet()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDAOContract(address)": FunctionFragment;
    "setLiquidityWallet(address)": FunctionFragment;
    "setMarketingWallet(address)": FunctionFragment;
    "setTeamWallet(address)": FunctionFragment;
    "teamWallet()": FunctionFragment;
    "totalAllocated()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vlrToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allocateFunds"
      | "allocatedFunds"
      | "batchAllocateFunds"
      | "daoContract"
      | "emergencyWithdraw"
      | "getAllocatedFunds"
      | "getTreasuryBalance"
      | "getTreasuryStats"
      | "getWallets"
      | "liquidityWallet"
      | "marketingWallet"
      | "owner"
      | "renounceOwnership"
      | "setDAOContract"
      | "setLiquidityWallet"
      | "setMarketingWallet"
      | "setTeamWallet"
      | "teamWallet"
      | "totalAllocated"
      | "transferOwnership"
      | "vlrToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allocateFunds",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "allocatedFunds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchAllocateFunds",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "daoContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllocatedFunds",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasuryBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasuryStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWallets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketingWallet",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDAOContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketingWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTeamWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "teamWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "vlrToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "allocateFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocatedFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchAllocateFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daoContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllocatedFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasuryBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasuryStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWallets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDAOContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTeamWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "teamWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vlrToken", data: BytesLike): Result;

  events: {
    "DAOContractUpdated(address,address)": EventFragment;
    "EmergencyWithdrawal(address,address,uint256)": EventFragment;
    "FundsAllocated(address,uint256,string,uint256)": EventFragment;
    "FundsWithdrawn(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "WalletUpdated(string,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DAOContractUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsAllocated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WalletUpdated"): EventFragment;
}

export interface DAOContractUpdatedEventObject {
  oldDAO: string;
  newDAO: string;
}
export type DAOContractUpdatedEvent = TypedEvent<
  [string, string],
  DAOContractUpdatedEventObject
>;

export type DAOContractUpdatedEventFilter =
  TypedEventFilter<DAOContractUpdatedEvent>;

export interface EmergencyWithdrawalEventObject {
  token: string;
  to: string;
  amount: BigNumber;
}
export type EmergencyWithdrawalEvent = TypedEvent<
  [string, string, BigNumber],
  EmergencyWithdrawalEventObject
>;

export type EmergencyWithdrawalEventFilter =
  TypedEventFilter<EmergencyWithdrawalEvent>;

export interface FundsAllocatedEventObject {
  wallet: string;
  amount: BigNumber;
  purpose: string;
  timestamp: BigNumber;
}
export type FundsAllocatedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  FundsAllocatedEventObject
>;

export type FundsAllocatedEventFilter = TypedEventFilter<FundsAllocatedEvent>;

export interface FundsWithdrawnEventObject {
  wallet: string;
  amount: BigNumber;
  timestamp: BigNumber;
}
export type FundsWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  FundsWithdrawnEventObject
>;

export type FundsWithdrawnEventFilter = TypedEventFilter<FundsWithdrawnEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WalletUpdatedEventObject {
  walletType: string;
  oldWallet: string;
  newWallet: string;
}
export type WalletUpdatedEvent = TypedEvent<
  [string, string, string],
  WalletUpdatedEventObject
>;

export type WalletUpdatedEventFilter = TypedEventFilter<WalletUpdatedEvent>;

export interface VelirionTreasury extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VelirionTreasuryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allocateFunds(
      wallet: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      purpose: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allocatedFunds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    batchAllocateFunds(
      wallets: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      purposes: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    daoContract(overrides?: CallOverrides): Promise<[string]>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAllocatedFunds(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTreasuryBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTreasuryStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        allocated: BigNumber;
        available: BigNumber;
      }
    >;

    getWallets(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        marketing: string;
        team: string;
        liquidity: string;
      }
    >;

    liquidityWallet(overrides?: CallOverrides): Promise<[string]>;

    marketingWallet(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDAOContract(
      _daoContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidityWallet(
      _newWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMarketingWallet(
      _newWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTeamWallet(
      _newWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    teamWallet(overrides?: CallOverrides): Promise<[string]>;

    totalAllocated(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vlrToken(overrides?: CallOverrides): Promise<[string]>;
  };

  allocateFunds(
    wallet: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    purpose: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allocatedFunds(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  batchAllocateFunds(
    wallets: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    purposes: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  daoContract(overrides?: CallOverrides): Promise<string>;

  emergencyWithdraw(
    token: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAllocatedFunds(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTreasuryBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getTreasuryStats(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      balance: BigNumber;
      allocated: BigNumber;
      available: BigNumber;
    }
  >;

  getWallets(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      marketing: string;
      team: string;
      liquidity: string;
    }
  >;

  liquidityWallet(overrides?: CallOverrides): Promise<string>;

  marketingWallet(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDAOContract(
    _daoContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidityWallet(
    _newWallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMarketingWallet(
    _newWallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTeamWallet(
    _newWallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  teamWallet(overrides?: CallOverrides): Promise<string>;

  totalAllocated(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vlrToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    allocateFunds(
      wallet: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      purpose: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    allocatedFunds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchAllocateFunds(
      wallets: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      purposes: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    daoContract(overrides?: CallOverrides): Promise<string>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllocatedFunds(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreasuryBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getTreasuryStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        allocated: BigNumber;
        available: BigNumber;
      }
    >;

    getWallets(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        marketing: string;
        team: string;
        liquidity: string;
      }
    >;

    liquidityWallet(overrides?: CallOverrides): Promise<string>;

    marketingWallet(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDAOContract(
      _daoContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityWallet(
      _newWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketingWallet(
      _newWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTeamWallet(
      _newWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    teamWallet(overrides?: CallOverrides): Promise<string>;

    totalAllocated(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vlrToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DAOContractUpdated(address,address)"(
      oldDAO?: PromiseOrValue<string> | null,
      newDAO?: PromiseOrValue<string> | null
    ): DAOContractUpdatedEventFilter;
    DAOContractUpdated(
      oldDAO?: PromiseOrValue<string> | null,
      newDAO?: PromiseOrValue<string> | null
    ): DAOContractUpdatedEventFilter;

    "EmergencyWithdrawal(address,address,uint256)"(
      token?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): EmergencyWithdrawalEventFilter;
    EmergencyWithdrawal(
      token?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): EmergencyWithdrawalEventFilter;

    "FundsAllocated(address,uint256,string,uint256)"(
      wallet?: PromiseOrValue<string> | null,
      amount?: null,
      purpose?: null,
      timestamp?: null
    ): FundsAllocatedEventFilter;
    FundsAllocated(
      wallet?: PromiseOrValue<string> | null,
      amount?: null,
      purpose?: null,
      timestamp?: null
    ): FundsAllocatedEventFilter;

    "FundsWithdrawn(address,uint256,uint256)"(
      wallet?: PromiseOrValue<string> | null,
      amount?: null,
      timestamp?: null
    ): FundsWithdrawnEventFilter;
    FundsWithdrawn(
      wallet?: PromiseOrValue<string> | null,
      amount?: null,
      timestamp?: null
    ): FundsWithdrawnEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "WalletUpdated(string,address,address)"(
      walletType?: null,
      oldWallet?: PromiseOrValue<string> | null,
      newWallet?: PromiseOrValue<string> | null
    ): WalletUpdatedEventFilter;
    WalletUpdated(
      walletType?: null,
      oldWallet?: PromiseOrValue<string> | null,
      newWallet?: PromiseOrValue<string> | null
    ): WalletUpdatedEventFilter;
  };

  estimateGas: {
    allocateFunds(
      wallet: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      purpose: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allocatedFunds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchAllocateFunds(
      wallets: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      purposes: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    daoContract(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAllocatedFunds(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreasuryBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getTreasuryStats(overrides?: CallOverrides): Promise<BigNumber>;

    getWallets(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityWallet(overrides?: CallOverrides): Promise<BigNumber>;

    marketingWallet(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDAOContract(
      _daoContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidityWallet(
      _newWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMarketingWallet(
      _newWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTeamWallet(
      _newWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    teamWallet(overrides?: CallOverrides): Promise<BigNumber>;

    totalAllocated(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vlrToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allocateFunds(
      wallet: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      purpose: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allocatedFunds(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchAllocateFunds(
      wallets: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      purposes: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    daoContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      token: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAllocatedFunds(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreasuryBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreasuryStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWallets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketingWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDAOContract(
      _daoContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityWallet(
      _newWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMarketingWallet(
      _newWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTeamWallet(
      _newWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    teamWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAllocated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vlrToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
