/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IVelirionNFT {
  export type NFTMetadataStruct = {
    tier: PromiseOrValue<BigNumberish>;
    mintedAt: PromiseOrValue<BigNumberish>;
    referralCount: PromiseOrValue<BigNumberish>;
    totalEarned: PromiseOrValue<BigNumberish>;
    stakedAmount: PromiseOrValue<BigNumberish>;
    isActive: PromiseOrValue<boolean>;
  };

  export type NFTMetadataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    tier: BigNumber;
    mintedAt: BigNumber;
    referralCount: BigNumber;
    totalEarned: BigNumber;
    stakedAmount: BigNumber;
    isActive: boolean;
  };
}

export interface IVelirionNFTInterface extends utils.Interface {
  functions: {
    "getMetadata(uint256)": FunctionFragment;
    "getUserNFT(address)": FunctionFragment;
    "hasNFT(address)": FunctionFragment;
    "mintNFT(address,uint256)": FunctionFragment;
    "updateMetadata(uint256,uint256,uint256)": FunctionFragment;
    "upgradeNFT(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getMetadata"
      | "getUserNFT"
      | "hasNFT"
      | "mintNFT"
      | "updateMetadata"
      | "upgradeNFT"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getMetadata",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserNFT",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasNFT",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintNFT",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMetadata",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeNFT",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUserNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeNFT", data: BytesLike): Result;

  events: {
    "MetadataUpdated(uint256,uint256,uint256)": EventFragment;
    "NFTMinted(address,uint256,uint256,uint256)": EventFragment;
    "NFTUpgraded(uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MetadataUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTMinted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTUpgraded"): EventFragment;
}

export interface MetadataUpdatedEventObject {
  tokenId: BigNumber;
  referralCount: BigNumber;
  totalEarned: BigNumber;
}
export type MetadataUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  MetadataUpdatedEventObject
>;

export type MetadataUpdatedEventFilter = TypedEventFilter<MetadataUpdatedEvent>;

export interface NFTMintedEventObject {
  user: string;
  tokenId: BigNumber;
  tier: BigNumber;
  timestamp: BigNumber;
}
export type NFTMintedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  NFTMintedEventObject
>;

export type NFTMintedEventFilter = TypedEventFilter<NFTMintedEvent>;

export interface NFTUpgradedEventObject {
  tokenId: BigNumber;
  oldTier: BigNumber;
  newTier: BigNumber;
  timestamp: BigNumber;
}
export type NFTUpgradedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  NFTUpgradedEventObject
>;

export type NFTUpgradedEventFilter = TypedEventFilter<NFTUpgradedEvent>;

export interface IVelirionNFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVelirionNFTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getMetadata(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IVelirionNFT.NFTMetadataStructOutput]>;

    getUserNFT(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasNFT(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintNFT(
      user: PromiseOrValue<string>,
      tier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMetadata(
      tokenId: PromiseOrValue<BigNumberish>,
      referralCount: PromiseOrValue<BigNumberish>,
      totalEarned: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeNFT(
      tokenId: PromiseOrValue<BigNumberish>,
      newTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getMetadata(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IVelirionNFT.NFTMetadataStructOutput>;

  getUserNFT(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasNFT(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintNFT(
    user: PromiseOrValue<string>,
    tier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMetadata(
    tokenId: PromiseOrValue<BigNumberish>,
    referralCount: PromiseOrValue<BigNumberish>,
    totalEarned: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeNFT(
    tokenId: PromiseOrValue<BigNumberish>,
    newTier: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getMetadata(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IVelirionNFT.NFTMetadataStructOutput>;

    getUserNFT(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasNFT(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintNFT(
      user: PromiseOrValue<string>,
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMetadata(
      tokenId: PromiseOrValue<BigNumberish>,
      referralCount: PromiseOrValue<BigNumberish>,
      totalEarned: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeNFT(
      tokenId: PromiseOrValue<BigNumberish>,
      newTier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MetadataUpdated(uint256,uint256,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      referralCount?: null,
      totalEarned?: null
    ): MetadataUpdatedEventFilter;
    MetadataUpdated(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      referralCount?: null,
      totalEarned?: null
    ): MetadataUpdatedEventFilter;

    "NFTMinted(address,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      tier?: null,
      timestamp?: null
    ): NFTMintedEventFilter;
    NFTMinted(
      user?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      tier?: null,
      timestamp?: null
    ): NFTMintedEventFilter;

    "NFTUpgraded(uint256,uint256,uint256,uint256)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      oldTier?: null,
      newTier?: null,
      timestamp?: null
    ): NFTUpgradedEventFilter;
    NFTUpgraded(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      oldTier?: null,
      newTier?: null,
      timestamp?: null
    ): NFTUpgradedEventFilter;
  };

  estimateGas: {
    getMetadata(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserNFT(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasNFT(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintNFT(
      user: PromiseOrValue<string>,
      tier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMetadata(
      tokenId: PromiseOrValue<BigNumberish>,
      referralCount: PromiseOrValue<BigNumberish>,
      totalEarned: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeNFT(
      tokenId: PromiseOrValue<BigNumberish>,
      newTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getMetadata(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserNFT(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasNFT(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintNFT(
      user: PromiseOrValue<string>,
      tier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMetadata(
      tokenId: PromiseOrValue<BigNumberish>,
      referralCount: PromiseOrValue<BigNumberish>,
      totalEarned: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeNFT(
      tokenId: PromiseOrValue<BigNumberish>,
      newTier: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
