/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IVelirionReferral {
  export type ReferralStatsStruct = {
    totalVolume: PromiseOrValue<BigNumberish>;
    totalStakingVolume: PromiseOrValue<BigNumberish>;
    directReferrals: PromiseOrValue<string>[];
  };

  export type ReferralStatsStructOutput = [BigNumber, BigNumber, string[]] & {
    totalVolume: BigNumber;
    totalStakingVolume: BigNumber;
    directReferrals: string[];
  };

  export type ReferrerStruct = {
    addr: PromiseOrValue<string>;
    level: PromiseOrValue<BigNumberish>;
    directReferrals: PromiseOrValue<BigNumberish>;
    totalEarned: PromiseOrValue<BigNumberish>;
    purchaseBonusEarned: PromiseOrValue<BigNumberish>;
    stakingBonusEarned: PromiseOrValue<BigNumberish>;
    registrationTime: PromiseOrValue<BigNumberish>;
    isActive: PromiseOrValue<boolean>;
  };

  export type ReferrerStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    addr: string;
    level: BigNumber;
    directReferrals: BigNumber;
    totalEarned: BigNumber;
    purchaseBonusEarned: BigNumber;
    stakingBonusEarned: BigNumber;
    registrationTime: BigNumber;
    isActive: boolean;
  };
}

export interface IVelirionReferralInterface extends utils.Interface {
  functions: {
    "claimRewards()": FunctionFragment;
    "distributePurchaseBonus(address,uint256)": FunctionFragment;
    "distributeStakingBonus(address,uint256)": FunctionFragment;
    "getPendingRewards(address)": FunctionFragment;
    "getReferralStats(address)": FunctionFragment;
    "getReferrer(address)": FunctionFragment;
    "getReferrerData(address)": FunctionFragment;
    "getReferrerInfo(address)": FunctionFragment;
    "getTierBonuses(uint256)": FunctionFragment;
    "isAuthorizedContract(address)": FunctionFragment;
    "register(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimRewards"
      | "distributePurchaseBonus"
      | "distributeStakingBonus"
      | "getPendingRewards"
      | "getReferralStats"
      | "getReferrer"
      | "getReferrerData"
      | "getReferrerInfo"
      | "getTierBonuses"
      | "isAuthorizedContract"
      | "register"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributePurchaseBonus",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeStakingBonus",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferralStats",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferrer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferrerData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferrerInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTierBonuses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributePurchaseBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeStakingBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferralStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferrerData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReferrerInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTierBonuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;

  events: {
    "AuthorizedContractUpdated(address,bool)": EventFragment;
    "PurchaseBonusDistributed(address,address,uint256)": EventFragment;
    "ReferralRegistered(address,address)": EventFragment;
    "RewardsClaimed(address,uint256)": EventFragment;
    "StakingBonusDistributed(address,address,uint256)": EventFragment;
    "TierUpgraded(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorizedContractUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PurchaseBonusDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakingBonusDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TierUpgraded"): EventFragment;
}

export interface AuthorizedContractUpdatedEventObject {
  contractAddress: string;
  status: boolean;
}
export type AuthorizedContractUpdatedEvent = TypedEvent<
  [string, boolean],
  AuthorizedContractUpdatedEventObject
>;

export type AuthorizedContractUpdatedEventFilter =
  TypedEventFilter<AuthorizedContractUpdatedEvent>;

export interface PurchaseBonusDistributedEventObject {
  referrer: string;
  buyer: string;
  bonusAmount: BigNumber;
}
export type PurchaseBonusDistributedEvent = TypedEvent<
  [string, string, BigNumber],
  PurchaseBonusDistributedEventObject
>;

export type PurchaseBonusDistributedEventFilter =
  TypedEventFilter<PurchaseBonusDistributedEvent>;

export interface ReferralRegisteredEventObject {
  user: string;
  referrer: string;
}
export type ReferralRegisteredEvent = TypedEvent<
  [string, string],
  ReferralRegisteredEventObject
>;

export type ReferralRegisteredEventFilter =
  TypedEventFilter<ReferralRegisteredEvent>;

export interface RewardsClaimedEventObject {
  referrer: string;
  amount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface StakingBonusDistributedEventObject {
  referrer: string;
  staker: string;
  bonusAmount: BigNumber;
}
export type StakingBonusDistributedEvent = TypedEvent<
  [string, string, BigNumber],
  StakingBonusDistributedEventObject
>;

export type StakingBonusDistributedEventFilter =
  TypedEventFilter<StakingBonusDistributedEvent>;

export interface TierUpgradedEventObject {
  referrer: string;
  oldTier: BigNumber;
  newTier: BigNumber;
}
export type TierUpgradedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  TierUpgradedEventObject
>;

export type TierUpgradedEventFilter = TypedEventFilter<TierUpgradedEvent>;

export interface IVelirionReferral extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVelirionReferralInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributePurchaseBonus(
      buyer: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeStakingBonus(
      staker: PromiseOrValue<string>,
      rewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPendingRewards(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReferralStats(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IVelirionReferral.ReferralStatsStructOutput]>;

    getReferrer(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getReferrerData(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IVelirionReferral.ReferrerStructOutput]>;

    getReferrerInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        level: BigNumber;
        directReferrals: BigNumber;
        totalEarned: BigNumber;
      }
    >;

    getTierBonuses(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        purchaseBonus: BigNumber;
        stakingBonus: BigNumber;
      }
    >;

    isAuthorizedContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    register(
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claimRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributePurchaseBonus(
    buyer: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeStakingBonus(
    staker: PromiseOrValue<string>,
    rewardAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPendingRewards(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReferralStats(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IVelirionReferral.ReferralStatsStructOutput>;

  getReferrer(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getReferrerData(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IVelirionReferral.ReferrerStructOutput>;

  getReferrerInfo(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      level: BigNumber;
      directReferrals: BigNumber;
      totalEarned: BigNumber;
    }
  >;

  getTierBonuses(
    tier: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      purchaseBonus: BigNumber;
      stakingBonus: BigNumber;
    }
  >;

  isAuthorizedContract(
    contractAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  register(
    referrer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimRewards(overrides?: CallOverrides): Promise<void>;

    distributePurchaseBonus(
      buyer: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeStakingBonus(
      staker: PromiseOrValue<string>,
      rewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPendingRewards(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferralStats(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IVelirionReferral.ReferralStatsStructOutput>;

    getReferrer(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getReferrerData(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IVelirionReferral.ReferrerStructOutput>;

    getReferrerInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        level: BigNumber;
        directReferrals: BigNumber;
        totalEarned: BigNumber;
      }
    >;

    getTierBonuses(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        purchaseBonus: BigNumber;
        stakingBonus: BigNumber;
      }
    >;

    isAuthorizedContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    register(
      referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuthorizedContractUpdated(address,bool)"(
      contractAddress?: PromiseOrValue<string> | null,
      status?: null
    ): AuthorizedContractUpdatedEventFilter;
    AuthorizedContractUpdated(
      contractAddress?: PromiseOrValue<string> | null,
      status?: null
    ): AuthorizedContractUpdatedEventFilter;

    "PurchaseBonusDistributed(address,address,uint256)"(
      referrer?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null,
      bonusAmount?: null
    ): PurchaseBonusDistributedEventFilter;
    PurchaseBonusDistributed(
      referrer?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null,
      bonusAmount?: null
    ): PurchaseBonusDistributedEventFilter;

    "ReferralRegistered(address,address)"(
      user?: PromiseOrValue<string> | null,
      referrer?: PromiseOrValue<string> | null
    ): ReferralRegisteredEventFilter;
    ReferralRegistered(
      user?: PromiseOrValue<string> | null,
      referrer?: PromiseOrValue<string> | null
    ): ReferralRegisteredEventFilter;

    "RewardsClaimed(address,uint256)"(
      referrer?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      referrer?: PromiseOrValue<string> | null,
      amount?: null
    ): RewardsClaimedEventFilter;

    "StakingBonusDistributed(address,address,uint256)"(
      referrer?: PromiseOrValue<string> | null,
      staker?: PromiseOrValue<string> | null,
      bonusAmount?: null
    ): StakingBonusDistributedEventFilter;
    StakingBonusDistributed(
      referrer?: PromiseOrValue<string> | null,
      staker?: PromiseOrValue<string> | null,
      bonusAmount?: null
    ): StakingBonusDistributedEventFilter;

    "TierUpgraded(address,uint256,uint256)"(
      referrer?: PromiseOrValue<string> | null,
      oldTier?: null,
      newTier?: null
    ): TierUpgradedEventFilter;
    TierUpgraded(
      referrer?: PromiseOrValue<string> | null,
      oldTier?: null,
      newTier?: null
    ): TierUpgradedEventFilter;
  };

  estimateGas: {
    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributePurchaseBonus(
      buyer: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeStakingBonus(
      staker: PromiseOrValue<string>,
      rewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPendingRewards(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferralStats(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferrer(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferrerData(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReferrerInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTierBonuses(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuthorizedContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributePurchaseBonus(
      buyer: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeStakingBonus(
      staker: PromiseOrValue<string>,
      rewardAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPendingRewards(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferralStats(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferrer(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferrerData(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReferrerInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTierBonuses(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuthorizedContract(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
