/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IVelirionStaking {
  export type UserStakingInfoStruct = {
    totalStaked: PromiseOrValue<BigNumberish>;
    totalRewardsClaimed: PromiseOrValue<BigNumberish>;
    activeStakes: PromiseOrValue<BigNumberish>;
    stakingPower: PromiseOrValue<BigNumberish>;
  };

  export type UserStakingInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    totalStaked: BigNumber;
    totalRewardsClaimed: BigNumber;
    activeStakes: BigNumber;
    stakingPower: BigNumber;
  };
}

export interface IVelirionStakingInterface extends utils.Interface {
  functions: {
    "calculatePenalty(address,uint256)": FunctionFragment;
    "calculateRewards(address,uint256)": FunctionFragment;
    "canUnstakeWithoutPenalty(address,uint256)": FunctionFragment;
    "claimRewards(uint256)": FunctionFragment;
    "getContractStats()": FunctionFragment;
    "getMaximumLock(uint8)": FunctionFragment;
    "getMinimumLock(uint8)": FunctionFragment;
    "getMinimumStake(uint8)": FunctionFragment;
    "getStakeInfo(address,uint256)": FunctionFragment;
    "getTotalStaked()": FunctionFragment;
    "getUserStakes(address)": FunctionFragment;
    "getUserStakingInfo(address)": FunctionFragment;
    "getVotingPower(address)": FunctionFragment;
    "renewStake(uint256)": FunctionFragment;
    "stake(uint256,uint8,uint256)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculatePenalty"
      | "calculateRewards"
      | "canUnstakeWithoutPenalty"
      | "claimRewards"
      | "getContractStats"
      | "getMaximumLock"
      | "getMinimumLock"
      | "getMinimumStake"
      | "getStakeInfo"
      | "getTotalStaked"
      | "getUserStakes"
      | "getUserStakingInfo"
      | "getVotingPower"
      | "renewStake"
      | "stake"
      | "unstake"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculatePenalty",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRewards",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "canUnstakeWithoutPenalty",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaximumLock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumLock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumStake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakingInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingPower",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renewStake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculatePenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canUnstakeWithoutPenalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaximumLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renewStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {
    "ReferralContractUpdated(address)": EventFragment;
    "RewardsClaimed(address,uint256,uint256,uint256)": EventFragment;
    "StakeRenewed(address,uint256,uint16,uint16)": EventFragment;
    "Staked(address,uint256,uint256,uint8,uint256,uint16)": EventFragment;
    "Unstaked(address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReferralContractUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeRenewed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
}

export interface ReferralContractUpdatedEventObject {
  newReferralContract: string;
}
export type ReferralContractUpdatedEvent = TypedEvent<
  [string],
  ReferralContractUpdatedEventObject
>;

export type ReferralContractUpdatedEventFilter =
  TypedEventFilter<ReferralContractUpdatedEvent>;

export interface RewardsClaimedEventObject {
  user: string;
  stakeId: BigNumber;
  rewards: BigNumber;
  referralBonus: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface StakeRenewedEventObject {
  user: string;
  stakeId: BigNumber;
  oldApr: number;
  newApr: number;
}
export type StakeRenewedEvent = TypedEvent<
  [string, BigNumber, number, number],
  StakeRenewedEventObject
>;

export type StakeRenewedEventFilter = TypedEventFilter<StakeRenewedEvent>;

export interface StakedEventObject {
  user: string;
  stakeId: BigNumber;
  amount: BigNumber;
  tier: number;
  lockDuration: BigNumber;
  apr: number;
}
export type StakedEvent = TypedEvent<
  [string, BigNumber, BigNumber, number, BigNumber, number],
  StakedEventObject
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface UnstakedEventObject {
  user: string;
  stakeId: BigNumber;
  amount: BigNumber;
  penalty: BigNumber;
  netAmount: BigNumber;
}
export type UnstakedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  UnstakedEventObject
>;

export type UnstakedEventFilter = TypedEventFilter<UnstakedEvent>;

export interface IVelirionStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVelirionStakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculatePenalty(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateRewards(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canUnstakeWithoutPenalty(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimRewards(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getContractStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalStaked: BigNumber;
        totalStakers: BigNumber;
        totalRewardsDistributed: BigNumber;
        contractBalance: BigNumber;
      }
    >;

    getMaximumLock(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinimumLock(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinimumStake(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakeInfo(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, number, boolean, boolean] & {
        amount: BigNumber;
        startTime: BigNumber;
        lockDuration: BigNumber;
        tier: number;
        apr: number;
        renewed: boolean;
        active: boolean;
      }
    >;

    getTotalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserStakes(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getUserStakingInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IVelirionStaking.UserStakingInfoStructOutput] & {
        info: IVelirionStaking.UserStakingInfoStructOutput;
      }
    >;

    getVotingPower(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renewStake(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unstake(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  calculatePenalty(
    user: PromiseOrValue<string>,
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateRewards(
    user: PromiseOrValue<string>,
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canUnstakeWithoutPenalty(
    user: PromiseOrValue<string>,
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimRewards(
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getContractStats(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalStaked: BigNumber;
      totalStakers: BigNumber;
      totalRewardsDistributed: BigNumber;
      contractBalance: BigNumber;
    }
  >;

  getMaximumLock(
    tier: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinimumLock(
    tier: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinimumStake(
    tier: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakeInfo(
    user: PromiseOrValue<string>,
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, number, number, boolean, boolean] & {
      amount: BigNumber;
      startTime: BigNumber;
      lockDuration: BigNumber;
      tier: number;
      apr: number;
      renewed: boolean;
      active: boolean;
    }
  >;

  getTotalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  getUserStakes(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUserStakingInfo(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IVelirionStaking.UserStakingInfoStructOutput>;

  getVotingPower(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renewStake(
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: PromiseOrValue<BigNumberish>,
    tier: PromiseOrValue<BigNumberish>,
    lockDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unstake(
    stakeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculatePenalty(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRewards(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canUnstakeWithoutPenalty(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimRewards(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getContractStats(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalStaked: BigNumber;
        totalStakers: BigNumber;
        totalRewardsDistributed: BigNumber;
        contractBalance: BigNumber;
      }
    >;

    getMaximumLock(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumLock(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumStake(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeInfo(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, number, number, boolean, boolean] & {
        amount: BigNumber;
        startTime: BigNumber;
        lockDuration: BigNumber;
        tier: number;
        apr: number;
        renewed: boolean;
        active: boolean;
      }
    >;

    getTotalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    getUserStakes(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUserStakingInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IVelirionStaking.UserStakingInfoStructOutput>;

    getVotingPower(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renewStake(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ReferralContractUpdated(address)"(
      newReferralContract?: PromiseOrValue<string> | null
    ): ReferralContractUpdatedEventFilter;
    ReferralContractUpdated(
      newReferralContract?: PromiseOrValue<string> | null
    ): ReferralContractUpdatedEventFilter;

    "RewardsClaimed(address,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      rewards?: null,
      referralBonus?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      user?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      rewards?: null,
      referralBonus?: null
    ): RewardsClaimedEventFilter;

    "StakeRenewed(address,uint256,uint16,uint16)"(
      user?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      oldApr?: null,
      newApr?: null
    ): StakeRenewedEventFilter;
    StakeRenewed(
      user?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      oldApr?: null,
      newApr?: null
    ): StakeRenewedEventFilter;

    "Staked(address,uint256,uint256,uint8,uint256,uint16)"(
      user?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      tier?: null,
      lockDuration?: null,
      apr?: null
    ): StakedEventFilter;
    Staked(
      user?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      tier?: null,
      lockDuration?: null,
      apr?: null
    ): StakedEventFilter;

    "Unstaked(address,uint256,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      penalty?: null,
      netAmount?: null
    ): UnstakedEventFilter;
    Unstaked(
      user?: PromiseOrValue<string> | null,
      stakeId?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      penalty?: null,
      netAmount?: null
    ): UnstakedEventFilter;
  };

  estimateGas: {
    calculatePenalty(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRewards(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canUnstakeWithoutPenalty(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getContractStats(overrides?: CallOverrides): Promise<BigNumber>;

    getMaximumLock(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumLock(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinimumStake(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeInfo(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    getUserStakes(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserStakingInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotingPower(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renewStake(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unstake(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculatePenalty(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRewards(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canUnstakeWithoutPenalty(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRewards(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getContractStats(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaximumLock(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumLock(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinimumStake(
      tier: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeInfo(
      user: PromiseOrValue<string>,
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserStakes(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserStakingInfo(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotingPower(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renewStake(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      lockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      stakeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
