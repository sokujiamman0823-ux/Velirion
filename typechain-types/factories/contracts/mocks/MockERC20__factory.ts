/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockERC20,
  MockERC20Interface,
} from "../../../contracts/mocks/MockERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals_",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620016f4380380620016f483398181016040528101906200003791906200028f565b828281600390816200004a919062000574565b5080600490816200005c919062000574565b5050506200007b6752271944db7b0cfb60c01b620000bb60201b60201c565b62000097672f4800e2bf7dd04b60c01b620000bb60201b60201c565b80600560006101000a81548160ff021916908360ff1602179055505050506200065b565b50565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200012782620000dc565b810181811067ffffffffffffffff82111715620001495762000148620000ed565b5b80604052505050565b60006200015e620000be565b90506200016c82826200011c565b919050565b600067ffffffffffffffff8211156200018f576200018e620000ed565b5b6200019a82620000dc565b9050602081019050919050565b60005b83811015620001c7578082015181840152602081019050620001aa565b60008484015250505050565b6000620001ea620001e48462000171565b62000152565b905082815260208101848484011115620002095762000208620000d7565b5b62000216848285620001a7565b509392505050565b600082601f830112620002365762000235620000d2565b5b815162000248848260208601620001d3565b91505092915050565b600060ff82169050919050565b620002698162000251565b81146200027557600080fd5b50565b60008151905062000289816200025e565b92915050565b600080600060608486031215620002ab57620002aa620000c8565b5b600084015167ffffffffffffffff811115620002cc57620002cb620000cd565b5b620002da868287016200021e565b935050602084015167ffffffffffffffff811115620002fe57620002fd620000cd565b5b6200030c868287016200021e565b92505060406200031f8682870162000278565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200037c57607f821691505b60208210810362000392576200039162000334565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003fc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620003bd565b620004088683620003bd565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004556200044f620004498462000420565b6200042a565b62000420565b9050919050565b6000819050919050565b620004718362000434565b6200048962000480826200045c565b848454620003ca565b825550505050565b600090565b620004a062000491565b620004ad81848462000466565b505050565b5b81811015620004d557620004c960008262000496565b600181019050620004b3565b5050565b601f8211156200052457620004ee8162000398565b620004f984620003ad565b8101602085101562000509578190505b620005216200051885620003ad565b830182620004b2565b50505b505050565b600082821c905092915050565b6000620005496000198460080262000529565b1980831691505092915050565b600062000564838362000536565b9150826002028217905092915050565b6200057f8262000329565b67ffffffffffffffff8111156200059b576200059a620000ed565b5b620005a7825462000363565b620005b4828285620004d9565b600060209050601f831160018114620005ec5760008415620005d7578287015190505b620005e3858262000556565b86555062000653565b601f198416620005fc8662000398565b60005b828110156200062657848901518255600182019150602085019450602081019050620005ff565b8683101562000646578489015162000642601f89168262000536565b8355505b6001600288020188555050505b505050505050565b611089806200066b6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806340c10f191161007157806340c10f191461016857806370a082311461018457806395d89b41146101b45780639dc29fac146101d2578063a9059cbb146101ee578063dd62ed3e1461021e576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b661024e565b6040516100c39190610cdd565b60405180910390f35b6100e660048036038101906100e19190610d98565b6102e0565b6040516100f39190610df3565b60405180910390f35b610104610303565b6040516101119190610e1d565b60405180910390f35b610134600480360381019061012f9190610e38565b61030d565b6040516101419190610df3565b60405180910390f35b61015261033c565b60405161015f9190610ea7565b60405180910390f35b610182600480360381019061017d9190610d98565b61038f565b005b61019e60048036038101906101999190610ec2565b6103d9565b6040516101ab9190610e1d565b60405180910390f35b6101bc610421565b6040516101c99190610cdd565b60405180910390f35b6101ec60048036038101906101e79190610d98565b6104b3565b005b61020860048036038101906102039190610d98565b6104fd565b6040516102159190610df3565b60405180910390f35b61023860048036038101906102339190610eef565b610520565b6040516102459190610e1d565b60405180910390f35b60606003805461025d90610f5e565b80601f016020809104026020016040519081016040528092919081815260200182805461028990610f5e565b80156102d65780601f106102ab576101008083540402835291602001916102d6565b820191906000526020600020905b8154815290600101906020018083116102b957829003601f168201915b5050505050905090565b6000806102eb6105a7565b90506102f88185856105af565b600191505092915050565b6000600254905090565b6000806103186105a7565b90506103258582856105c1565b610330858585610656565b60019150509392505050565b600061035267395111edbd93ef2360c01b61074a565b61036667db78826fe2e8feb660c01b61074a565b61037a6742889ab16c71703460c01b61074a565b600560009054906101000a900460ff16905090565b6103a367f91712fb3cf3715160c01b61074a565b6103b767a62ecdfbd5324e8860c01b61074a565b6103cb673fada93df64823b760c01b61074a565b6103d5828261074d565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461043090610f5e565b80601f016020809104026020016040519081016040528092919081815260200182805461045c90610f5e565b80156104a95780601f1061047e576101008083540402835291602001916104a9565b820191906000526020600020905b81548152906001019060200180831161048c57829003601f168201915b5050505050905090565b6104c767eeb79239a48922e260c01b61074a565b6104db670494030bc952755e60c01b61074a565b6104ef673e9e05713d73d54260c01b61074a565b6104f982826107cf565b5050565b6000806105086105a7565b9050610515818585610656565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b6105bc8383836001610851565b505050565b60006105cd8484610520565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110156106505781811015610640578281836040517ffb8f41b200000000000000000000000000000000000000000000000000000000815260040161063793929190610f9e565b60405180910390fd5b61064f84848484036000610851565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036106c85760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016106bf9190610fd5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361073a5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016107319190610fd5565b60405180910390fd5b610745838383610a28565b505050565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107bf5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016107b69190610fd5565b60405180910390fd5b6107cb60008383610a28565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108415760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016108389190610fd5565b60405180910390fd5b61084d82600083610a28565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036108c35760006040517fe602df050000000000000000000000000000000000000000000000000000000081526004016108ba9190610fd5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036109355760006040517f94280d6200000000000000000000000000000000000000000000000000000000815260040161092c9190610fd5565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508015610a22578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610a199190610e1d565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a7a578060026000828254610a6e919061101f565b92505081905550610b4d565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610b06578381836040517fe450d38c000000000000000000000000000000000000000000000000000000008152600401610afd93929190610f9e565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b965780600260008282540392505081905550610be3565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610c409190610e1d565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c87578082015181840152602081019050610c6c565b60008484015250505050565b6000601f19601f8301169050919050565b6000610caf82610c4d565b610cb98185610c58565b9350610cc9818560208601610c69565b610cd281610c93565b840191505092915050565b60006020820190508181036000830152610cf78184610ca4565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d2f82610d04565b9050919050565b610d3f81610d24565b8114610d4a57600080fd5b50565b600081359050610d5c81610d36565b92915050565b6000819050919050565b610d7581610d62565b8114610d8057600080fd5b50565b600081359050610d9281610d6c565b92915050565b60008060408385031215610daf57610dae610cff565b5b6000610dbd85828601610d4d565b9250506020610dce85828601610d83565b9150509250929050565b60008115159050919050565b610ded81610dd8565b82525050565b6000602082019050610e086000830184610de4565b92915050565b610e1781610d62565b82525050565b6000602082019050610e326000830184610e0e565b92915050565b600080600060608486031215610e5157610e50610cff565b5b6000610e5f86828701610d4d565b9350506020610e7086828701610d4d565b9250506040610e8186828701610d83565b9150509250925092565b600060ff82169050919050565b610ea181610e8b565b82525050565b6000602082019050610ebc6000830184610e98565b92915050565b600060208284031215610ed857610ed7610cff565b5b6000610ee684828501610d4d565b91505092915050565b60008060408385031215610f0657610f05610cff565b5b6000610f1485828601610d4d565b9250506020610f2585828601610d4d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610f7657607f821691505b602082108103610f8957610f88610f2f565b5b50919050565b610f9881610d24565b82525050565b6000606082019050610fb36000830186610f8f565b610fc06020830185610e0e565b610fcd6040830184610e0e565b949350505050565b6000602082019050610fea6000830184610f8f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061102a82610d62565b915061103583610d62565b925082820190508082111561104d5761104c610ff0565b5b9291505056fea264697066735822122068d8bb4df349257c4b7d82047618cb49fa04365a242c720594c774051f5c516464736f6c63430008140033";

type MockERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20__factory extends ContractFactory {
  constructor(...args: MockERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    decimals_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockERC20> {
    return super.deploy(
      name,
      symbol,
      decimals_,
      overrides || {}
    ) as Promise<MockERC20>;
  }
  override getDeployTransaction(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    decimals_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, decimals_, overrides || {});
  }
  override attach(address: string): MockERC20 {
    return super.attach(address) as MockERC20;
  }
  override connect(signer: Signer): MockERC20__factory {
    return super.connect(signer) as MockERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new utils.Interface(_abi) as MockERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC20 {
    return new Contract(address, _abi, signerOrProvider) as MockERC20;
  }
}
